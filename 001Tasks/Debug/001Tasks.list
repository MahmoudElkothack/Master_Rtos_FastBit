
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800625c  0800625c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006264  08006264  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006264  08006264  00016264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800626c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001441c  20000080  080062ec  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001449c  080062ec  0002449c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d48  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a24  00000000  00000000  00034df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010e8  00000000  00000000  00037820  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f80  00000000  00000000  00038908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000234c3  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e25d  00000000  00000000  0005cd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5234  00000000  00000000  0006afa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001401dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004928  00000000  00000000  00140258  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060b8 	.word	0x080060b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080060b8 	.word	0x080060b8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200143f0 	.word	0x200143f0
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb59 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f851 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8b9 	bl	8000794 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */


  //Enable the CYCCNT counter.
  DWT_CTRL |= ( 1 << 0);
 8000622:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <main+0x90>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a1e      	ldr	r2, [pc, #120]	; (80006a0 <main+0x90>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 800062e:	481d      	ldr	r0, [pc, #116]	; (80006a4 <main+0x94>)
 8000630:	f003 f844 	bl	80036bc <SEGGER_UART_init>

  SEGGER_SYSVIEW_Conf();
 8000634:	f002 fe74 	bl	8003320 <SEGGER_SYSVIEW_Conf>

 // SEGGER_SYSVIEW_Start();

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2302      	movs	r3, #2
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <main+0x98>)
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	4919      	ldr	r1, [pc, #100]	; (80006ac <main+0x9c>)
 8000648:	4819      	ldr	r0, [pc, #100]	; (80006b0 <main+0xa0>)
 800064a:	f001 fd50 	bl	80020ee <xTaskCreate>
 800064e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d009      	beq.n	800066a <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065a:	f383 8811 	msr	BASEPRI, r3
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	e7fe      	b.n	8000668 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2302      	movs	r3, #2
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <main+0xa4>)
 8000674:	22c8      	movs	r2, #200	; 0xc8
 8000676:	4910      	ldr	r1, [pc, #64]	; (80006b8 <main+0xa8>)
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <main+0xac>)
 800067a:	f001 fd38 	bl	80020ee <xTaskCreate>
 800067e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d009      	beq.n	800069a <main+0x8a>
 8000686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800068a:	f383 8811 	msr	BASEPRI, r3
 800068e:	f3bf 8f6f 	isb	sy
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	e7fe      	b.n	8000698 <main+0x88>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800069a:	f001 fe8b 	bl	80023b4 <vTaskStartScheduler>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069e:	e7fe      	b.n	800069e <main+0x8e>
 80006a0:	e0001000 	.word	0xe0001000
 80006a4:	0007a120 	.word	0x0007a120
 80006a8:	080060d0 	.word	0x080060d0
 80006ac:	080060e8 	.word	0x080060e8
 80006b0:	08000a55 	.word	0x08000a55
 80006b4:	080060f0 	.word	0x080060f0
 80006b8:	08006108 	.word	0x08006108
 80006bc:	08000a91 	.word	0x08000a91

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	2230      	movs	r2, #48	; 0x30
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 f8cc 	bl	800586c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 030c 	add.w	r3, r7, #12
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	4b28      	ldr	r3, [pc, #160]	; (800078c <SystemClock_Config+0xcc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	4a27      	ldr	r2, [pc, #156]	; (800078c <SystemClock_Config+0xcc>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	; 0x40
 80006f4:	4b25      	ldr	r3, [pc, #148]	; (800078c <SystemClock_Config+0xcc>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xd0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <SystemClock_Config+0xd0>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6013      	str	r3, [r2, #0]
 8000710:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <SystemClock_Config+0xd0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000724:	2310      	movs	r3, #16
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000728:	2302      	movs	r3, #2
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000734:	23a8      	movs	r3, #168	; 0xa8
 8000736:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800073c:	2307      	movs	r3, #7
 800073e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fd99 	bl	800127c <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000750:	f000 f9ce 	bl	8000af0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000758:	2302      	movs	r3, #2
 800075a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000760:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000764:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2105      	movs	r1, #5
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fff2 	bl	800175c <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800077e:	f000 f9b7 	bl	8000af0 <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	; 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	61bb      	str	r3, [r7, #24]
 80007ae:	4ba1      	ldr	r3, [pc, #644]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4aa0      	ldr	r2, [pc, #640]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b9e      	ldr	r3, [pc, #632]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	4b9a      	ldr	r3, [pc, #616]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a99      	ldr	r2, [pc, #612]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b97      	ldr	r3, [pc, #604]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	4b93      	ldr	r3, [pc, #588]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a92      	ldr	r2, [pc, #584]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b90      	ldr	r3, [pc, #576]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b8c      	ldr	r3, [pc, #560]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a8b      	ldr	r2, [pc, #556]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b89      	ldr	r3, [pc, #548]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	4b85      	ldr	r3, [pc, #532]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a84      	ldr	r2, [pc, #528]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b82      	ldr	r3, [pc, #520]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b7e      	ldr	r3, [pc, #504]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a7d      	ldr	r2, [pc, #500]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b7b      	ldr	r3, [pc, #492]	; (8000a34 <MX_GPIO_Init+0x2a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2108      	movs	r1, #8
 8000856:	4878      	ldr	r0, [pc, #480]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000858:	f000 fcf6 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800085c:	2201      	movs	r2, #1
 800085e:	2101      	movs	r1, #1
 8000860:	4876      	ldr	r0, [pc, #472]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fcf1 	bl	8001248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000866:	2200      	movs	r2, #0
 8000868:	f24f 0110 	movw	r1, #61456	; 0xf010
 800086c:	4874      	ldr	r0, [pc, #464]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 800086e:	f000 fceb 	bl	8001248 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	486b      	ldr	r0, [pc, #428]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 800088a:	f000 fb43 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800088e:	2301      	movs	r3, #1
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4865      	ldr	r0, [pc, #404]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 80008a6:	f000 fb35 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008aa:	2308      	movs	r3, #8
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ba:	2305      	movs	r3, #5
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	485d      	ldr	r0, [pc, #372]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 80008c6:	f000 fb25 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ca:	2301      	movs	r3, #1
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ce:	4b5d      	ldr	r3, [pc, #372]	; (8000a44 <MX_GPIO_Init+0x2b0>)
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	485a      	ldr	r0, [pc, #360]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80008de:	f000 fb19 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008e2:	2310      	movs	r3, #16
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008f2:	2306      	movs	r3, #6
 80008f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4852      	ldr	r0, [pc, #328]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80008fe:	f000 fb09 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000902:	23e0      	movs	r3, #224	; 0xe0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000912:	2305      	movs	r3, #5
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	484a      	ldr	r0, [pc, #296]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 800091e:	f000 faf9 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000922:	2304      	movs	r3, #4
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4845      	ldr	r0, [pc, #276]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000936:	f000 faed 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800093a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094c:	2305      	movs	r3, #5
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000950:	f107 031c 	add.w	r3, r7, #28
 8000954:	4619      	mov	r1, r3
 8000956:	483d      	ldr	r0, [pc, #244]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000958:	f000 fadc 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800095c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000960:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4832      	ldr	r0, [pc, #200]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 8000976:	f000 facd 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800097a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800098c:	2306      	movs	r3, #6
 800098e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x2a8>)
 8000998:	f000 fabc 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800099c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4825      	ldr	r0, [pc, #148]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80009b2:	f000 faaf 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c8:	230a      	movs	r3, #10
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481d      	ldr	r0, [pc, #116]	; (8000a48 <MX_GPIO_Init+0x2b4>)
 80009d4:	f000 fa9e 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d8:	2320      	movs	r3, #32
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4815      	ldr	r0, [pc, #84]	; (8000a40 <MX_GPIO_Init+0x2ac>)
 80009ec:	f000 fa92 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f0:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f6:	2312      	movs	r3, #18
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a02:	2304      	movs	r3, #4
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480f      	ldr	r0, [pc, #60]	; (8000a4c <MX_GPIO_Init+0x2b8>)
 8000a0e:	f000 fa81 	bl	8000f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_GPIO_Init+0x2bc>)
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <MX_GPIO_Init+0x2a4>)
 8000a26:	f000 fa75 	bl	8000f14 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	10110000 	.word	0x10110000
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	10120000 	.word	0x10120000

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a09      	ldr	r2, [pc, #36]	; (8000a88 <task1_handler+0x34>)
 8000a64:	2164      	movs	r1, #100	; 0x64
 8000a66:	f004 ff09 	bl	800587c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fe20 	bl	80056b4 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <task1_handler+0x38>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a84:	e7ea      	b.n	8000a5c <task1_handler+0x8>
 8000a86:	bf00      	nop
 8000a88:	08006110 	.word	0x08006110
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <task2_handler>:

}


static void task2_handler(void* parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	; 0x70
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <task2_handler+0x34>)
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	f004 feeb 	bl	800587c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 fe02 	bl	80056b4 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <task2_handler+0x38>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000ac0:	e7ea      	b.n	8000a98 <task2_handler+0x8>
 8000ac2:	bf00      	nop
 8000ac4:	08006110 	.word	0x08006110
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 f917 	bl	8000d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40001000 	.word	0x40001000

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b3e:	f002 f84f 	bl	8002be0 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	2036      	movs	r0, #54	; 0x36
 8000b66:	f000 f9ab 	bl	8000ec0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000b6a:	2036      	movs	r0, #54	; 0x36
 8000b6c:	f000 f9c4 	bl	8000ef8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_InitTick+0xa4>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b8c:	f107 0210 	add.w	r2, r7, #16
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4611      	mov	r1, r2
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 ffbe 	bl	8001b18 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b9c:	f000 ffa8 	bl	8001af0 <HAL_RCC_GetPCLK1Freq>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba8:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <HAL_InitTick+0xa8>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_InitTick+0xac>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <HAL_InitTick+0xb0>)
 8000bb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_InitTick+0xac>)
 8000bbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <HAL_InitTick+0xac>)
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_InitTick+0xac>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bd4:	4809      	ldr	r0, [pc, #36]	; (8000bfc <HAL_InitTick+0xac>)
 8000bd6:	f000 ffd1 	bl	8001b7c <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000be0:	4806      	ldr	r0, [pc, #24]	; (8000bfc <HAL_InitTick+0xac>)
 8000be2:	f001 f800 	bl	8001be6 <HAL_TIM_Base_Start_IT>
 8000be6:	4603      	mov	r3, r0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3730      	adds	r7, #48	; 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	431bde83 	.word	0x431bde83
 8000bfc:	200143ac 	.word	0x200143ac
 8000c00:	40001000 	.word	0x40001000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <MemManage_Handler+0x4>

08000c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <TIM6_DAC_IRQHandler+0x10>)
 8000c3e:	f000 fff6 	bl	8001c2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200143ac 	.word	0x200143ac

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <SystemInit+0x28>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <SystemInit+0x28>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SystemInit+0x28>)
 8000c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c66:	609a      	str	r2, [r3, #8]
#endif
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c7e:	e003      	b.n	8000c88 <LoopCopyDataInit>

08000c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c86:	3104      	adds	r1, #4

08000c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c90:	d3f6      	bcc.n	8000c80 <CopyDataInit>
  ldr  r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c94:	e002      	b.n	8000c9c <LoopFillZerobss>

08000c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c98:	f842 3b04 	str.w	r3, [r2], #4

08000c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca0:	d3f9      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ca2:	f7ff ffd3 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f004 fda3 	bl	80057f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fcb1 	bl	8000610 <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cb4:	0800626c 	.word	0x0800626c
  ldr  r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cbc:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8000cc0:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8000cc4:	2001449c 	.word	0x2001449c

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f8d8 	bl	8000eaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff ff28 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fefe 	bl	8000b00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200143ec 	.word	0x200143ec

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200143ec 	.word	0x200143ec

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	; (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	; (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	; (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	; 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff4c 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000eb8:	bf00      	nop
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
 8000ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed2:	f7ff ff61 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000ed6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	6978      	ldr	r0, [r7, #20]
 8000ede:	f7ff ffb1 	bl	8000e44 <NVIC_EncodePriority>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff80 	bl	8000df0 <__NVIC_SetPriority>
}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff ff54 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	e16b      	b.n	8001208 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f30:	2201      	movs	r2, #1
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 815a 	bne.w	8001202 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d00b      	beq.n	8000f6e <HAL_GPIO_Init+0x5a>
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d007      	beq.n	8000f6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f62:	2b11      	cmp	r3, #17
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b12      	cmp	r3, #18
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0xfc>
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b12      	cmp	r3, #18
 800100e:	d123      	bne.n	8001058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0307 	and.w	r3, r3, #7
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	691a      	ldr	r2, [r3, #16]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	08da      	lsrs	r2, r3, #3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3208      	adds	r2, #8
 8001052:	69b9      	ldr	r1, [r7, #24]
 8001054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0203 	and.w	r2, r3, #3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80b4 	beq.w	8001202 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b5f      	ldr	r3, [pc, #380]	; (800121c <HAL_GPIO_Init+0x308>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a5e      	ldr	r2, [pc, #376]	; (800121c <HAL_GPIO_Init+0x308>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b5c      	ldr	r3, [pc, #368]	; (800121c <HAL_GPIO_Init+0x308>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b6:	4a5a      	ldr	r2, [pc, #360]	; (8001220 <HAL_GPIO_Init+0x30c>)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	3302      	adds	r3, #2
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	220f      	movs	r2, #15
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a51      	ldr	r2, [pc, #324]	; (8001224 <HAL_GPIO_Init+0x310>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d02b      	beq.n	800113a <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a50      	ldr	r2, [pc, #320]	; (8001228 <HAL_GPIO_Init+0x314>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d025      	beq.n	8001136 <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4f      	ldr	r2, [pc, #316]	; (800122c <HAL_GPIO_Init+0x318>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d01f      	beq.n	8001132 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4e      	ldr	r2, [pc, #312]	; (8001230 <HAL_GPIO_Init+0x31c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d019      	beq.n	800112e <HAL_GPIO_Init+0x21a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4d      	ldr	r2, [pc, #308]	; (8001234 <HAL_GPIO_Init+0x320>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d013      	beq.n	800112a <HAL_GPIO_Init+0x216>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4c      	ldr	r2, [pc, #304]	; (8001238 <HAL_GPIO_Init+0x324>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d00d      	beq.n	8001126 <HAL_GPIO_Init+0x212>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4b      	ldr	r2, [pc, #300]	; (800123c <HAL_GPIO_Init+0x328>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d007      	beq.n	8001122 <HAL_GPIO_Init+0x20e>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4a      	ldr	r2, [pc, #296]	; (8001240 <HAL_GPIO_Init+0x32c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d101      	bne.n	800111e <HAL_GPIO_Init+0x20a>
 800111a:	2307      	movs	r3, #7
 800111c:	e00e      	b.n	800113c <HAL_GPIO_Init+0x228>
 800111e:	2308      	movs	r3, #8
 8001120:	e00c      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001122:	2306      	movs	r3, #6
 8001124:	e00a      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001126:	2305      	movs	r3, #5
 8001128:	e008      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112a:	2304      	movs	r3, #4
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x228>
 800112e:	2303      	movs	r3, #3
 8001130:	e004      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001132:	2302      	movs	r3, #2
 8001134:	e002      	b.n	800113c <HAL_GPIO_Init+0x228>
 8001136:	2301      	movs	r3, #1
 8001138:	e000      	b.n	800113c <HAL_GPIO_Init+0x228>
 800113a:	2300      	movs	r3, #0
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	f002 0203 	and.w	r2, r2, #3
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	4093      	lsls	r3, r2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114c:	4934      	ldr	r1, [pc, #208]	; (8001220 <HAL_GPIO_Init+0x30c>)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3302      	adds	r3, #2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <HAL_GPIO_Init+0x330>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <HAL_GPIO_Init+0x330>)
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_GPIO_Init+0x330>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	43db      	mvns	r3, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4013      	ands	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011a8:	4a26      	ldr	r2, [pc, #152]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b25      	ldr	r3, [pc, #148]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a1c      	ldr	r2, [pc, #112]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a11      	ldr	r2, [pc, #68]	; (8001244 <HAL_GPIO_Init+0x330>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3301      	adds	r3, #1
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	f67f ae90 	bls.w	8000f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001210:	bf00      	nop
 8001212:	3724      	adds	r7, #36	; 0x24
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40023800 	.word	0x40023800
 8001220:	40013800 	.word	0x40013800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020400 	.word	0x40020400
 800122c:	40020800 	.word	0x40020800
 8001230:	40020c00 	.word	0x40020c00
 8001234:	40021000 	.word	0x40021000
 8001238:	40021400 	.word	0x40021400
 800123c:	40021800 	.word	0x40021800
 8001240:	40021c00 	.word	0x40021c00
 8001244:	40013c00 	.word	0x40013c00

08001248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	807b      	strh	r3, [r7, #2]
 8001254:	4613      	mov	r3, r2
 8001256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001258:	787b      	ldrb	r3, [r7, #1]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125e:	887a      	ldrh	r2, [r7, #2]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001264:	e003      	b.n	800126e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001266:	887b      	ldrh	r3, [r7, #2]
 8001268:	041a      	lsls	r2, r3, #16
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	619a      	str	r2, [r3, #24]
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e25b      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d075      	beq.n	8001386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800129a:	4ba3      	ldr	r3, [pc, #652]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d00c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012a6:	4ba0      	ldr	r3, [pc, #640]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	d112      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b9d      	ldr	r3, [pc, #628]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012be:	d10b      	bne.n	80012d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c0:	4b99      	ldr	r3, [pc, #612]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d05b      	beq.n	8001384 <HAL_RCC_OscConfig+0x108>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d157      	bne.n	8001384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e236      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e0:	d106      	bne.n	80012f0 <HAL_RCC_OscConfig+0x74>
 80012e2:	4b91      	ldr	r3, [pc, #580]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a90      	ldr	r2, [pc, #576]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	e01d      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f8:	d10c      	bne.n	8001314 <HAL_RCC_OscConfig+0x98>
 80012fa:	4b8b      	ldr	r3, [pc, #556]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a8a      	ldr	r2, [pc, #552]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a87      	ldr	r2, [pc, #540]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0xb0>
 8001314:	4b84      	ldr	r3, [pc, #528]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a83      	ldr	r2, [pc, #524]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 800131a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a80      	ldr	r2, [pc, #512]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800132a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fd00 	bl	8000d38 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800133c:	f7ff fcfc 	bl	8000d38 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b64      	cmp	r3, #100	; 0x64
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e1fb      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b76      	ldr	r3, [pc, #472]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0xc0>
 800135a:	e014      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fcec 	bl	8000d38 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fce8 	bl	8000d38 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e1e7      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	4b6c      	ldr	r3, [pc, #432]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0xe8>
 8001382:	e000      	b.n	8001386 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d063      	beq.n	800145a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001392:	4b65      	ldr	r3, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800139e:	4b62      	ldr	r3, [pc, #392]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a6:	2b08      	cmp	r3, #8
 80013a8:	d11c      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b5f      	ldr	r3, [pc, #380]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d116      	bne.n	80013e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b6:	4b5c      	ldr	r3, [pc, #368]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d001      	beq.n	80013ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e1bb      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ce:	4b56      	ldr	r3, [pc, #344]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	4952      	ldr	r1, [pc, #328]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e2:	e03a      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d020      	beq.n	800142e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ec:	4b4f      	ldr	r3, [pc, #316]	; (800152c <HAL_RCC_OscConfig+0x2b0>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f2:	f7ff fca1 	bl	8000d38 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fa:	f7ff fc9d 	bl	8000d38 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e19c      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	4b46      	ldr	r3, [pc, #280]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001418:	4b43      	ldr	r3, [pc, #268]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	4940      	ldr	r1, [pc, #256]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	4313      	orrs	r3, r2
 800142a:	600b      	str	r3, [r1, #0]
 800142c:	e015      	b.n	800145a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142e:	4b3f      	ldr	r3, [pc, #252]	; (800152c <HAL_RCC_OscConfig+0x2b0>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc80 	bl	8000d38 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc7c 	bl	8000d38 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e17b      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d030      	beq.n	80014c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d016      	beq.n	800149c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800146e:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HAL_RCC_OscConfig+0x2b4>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001474:	f7ff fc60 	bl	8000d38 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147c:	f7ff fc5c 	bl	8000d38 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e15b      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	4b26      	ldr	r3, [pc, #152]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x200>
 800149a:	e015      	b.n	80014c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_RCC_OscConfig+0x2b4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fc49 	bl	8000d38 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014aa:	f7ff fc45 	bl	8000d38 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e144      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a0 	beq.w	8001616 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10f      	bne.n	8001506 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001502:	2301      	movs	r3, #1
 8001504:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_RCC_OscConfig+0x2b8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d121      	bne.n	8001556 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_RCC_OscConfig+0x2b8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a07      	ldr	r2, [pc, #28]	; (8001534 <HAL_RCC_OscConfig+0x2b8>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151e:	f7ff fc0b 	bl	8000d38 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001524:	e011      	b.n	800154a <HAL_RCC_OscConfig+0x2ce>
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800
 800152c:	42470000 	.word	0x42470000
 8001530:	42470e80 	.word	0x42470e80
 8001534:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001538:	f7ff fbfe 	bl	8000d38 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e0fd      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <HAL_RCC_OscConfig+0x4d4>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f0      	beq.n	8001538 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d106      	bne.n	800156c <HAL_RCC_OscConfig+0x2f0>
 800155e:	4b7d      	ldr	r3, [pc, #500]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001562:	4a7c      	ldr	r2, [pc, #496]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6713      	str	r3, [r2, #112]	; 0x70
 800156a:	e01c      	b.n	80015a6 <HAL_RCC_OscConfig+0x32a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b05      	cmp	r3, #5
 8001572:	d10c      	bne.n	800158e <HAL_RCC_OscConfig+0x312>
 8001574:	4b77      	ldr	r3, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	4a76      	ldr	r2, [pc, #472]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6713      	str	r3, [r2, #112]	; 0x70
 8001580:	4b74      	ldr	r3, [pc, #464]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a73      	ldr	r2, [pc, #460]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	e00b      	b.n	80015a6 <HAL_RCC_OscConfig+0x32a>
 800158e:	4b71      	ldr	r3, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	4a70      	ldr	r2, [pc, #448]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6713      	str	r3, [r2, #112]	; 0x70
 800159a:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 800159c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159e:	4a6d      	ldr	r2, [pc, #436]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d015      	beq.n	80015da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ae:	f7ff fbc3 	bl	8000d38 <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b4:	e00a      	b.n	80015cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015b6:	f7ff fbbf 	bl	8000d38 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e0bc      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	4b61      	ldr	r3, [pc, #388]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ee      	beq.n	80015b6 <HAL_RCC_OscConfig+0x33a>
 80015d8:	e014      	b.n	8001604 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fbad 	bl	8000d38 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e2:	f7ff fba9 	bl	8000d38 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e0a6      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	4b56      	ldr	r3, [pc, #344]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 80015fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1ee      	bne.n	80015e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d105      	bne.n	8001616 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160a:	4b52      	ldr	r3, [pc, #328]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	4a51      	ldr	r2, [pc, #324]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001610:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8092 	beq.w	8001744 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001620:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b08      	cmp	r3, #8
 800162a:	d05c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	2b02      	cmp	r3, #2
 8001632:	d141      	bne.n	80016b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <HAL_RCC_OscConfig+0x4dc>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163a:	f7ff fb7d 	bl	8000d38 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001642:	f7ff fb79 	bl	8000d38 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e078      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001654:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69da      	ldr	r2, [r3, #28]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	019b      	lsls	r3, r3, #6
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	085b      	lsrs	r3, r3, #1
 8001678:	3b01      	subs	r3, #1
 800167a:	041b      	lsls	r3, r3, #16
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	061b      	lsls	r3, r3, #24
 8001684:	4933      	ldr	r1, [pc, #204]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800168a:	4b33      	ldr	r3, [pc, #204]	; (8001758 <HAL_RCC_OscConfig+0x4dc>)
 800168c:	2201      	movs	r2, #1
 800168e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fb52 	bl	8000d38 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001698:	f7ff fb4e 	bl	8000d38 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e04d      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d0f0      	beq.n	8001698 <HAL_RCC_OscConfig+0x41c>
 80016b6:	e045      	b.n	8001744 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x4dc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fb3b 	bl	8000d38 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fb37 	bl	8000d38 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e036      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x44a>
 80016e4:	e02e      	b.n	8001744 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e029      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_RCC_OscConfig+0x4d8>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	429a      	cmp	r2, r3
 8001704:	d11c      	bne.n	8001740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d115      	bne.n	8001740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001720:	4293      	cmp	r3, r2
 8001722:	d10d      	bne.n	8001740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d106      	bne.n	8001740 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d001      	beq.n	8001744 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40007000 	.word	0x40007000
 8001754:	40023800 	.word	0x40023800
 8001758:	42470060 	.word	0x42470060

0800175c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0cc      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001770:	4b68      	ldr	r3, [pc, #416]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 030f 	and.w	r3, r3, #15
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	429a      	cmp	r2, r3
 800177c:	d90c      	bls.n	8001798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800177e:	4b65      	ldr	r3, [pc, #404]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001786:	4b63      	ldr	r3, [pc, #396]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0b8      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d020      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b0:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a58      	ldr	r2, [pc, #352]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c8:	4b53      	ldr	r3, [pc, #332]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d4:	4b50      	ldr	r3, [pc, #320]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	494d      	ldr	r1, [pc, #308]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d044      	beq.n	800187c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d119      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e07f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d003      	beq.n	800181a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001816:	2b03      	cmp	r3, #3
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181a:	4b3f      	ldr	r3, [pc, #252]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d109      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e06f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e067      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f023 0203 	bic.w	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	4934      	ldr	r1, [pc, #208]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800184c:	f7ff fa74 	bl	8000d38 <HAL_GetTick>
 8001850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	e00a      	b.n	800186a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001854:	f7ff fa70 	bl	8000d38 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e04f      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 020c 	and.w	r2, r3, #12
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	429a      	cmp	r2, r3
 800187a:	d1eb      	bne.n	8001854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	429a      	cmp	r2, r3
 8001888:	d20c      	bcs.n	80018a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188a:	4b22      	ldr	r3, [pc, #136]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	b2d2      	uxtb	r2, r2
 8001890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d001      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e032      	b.n	800190a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4916      	ldr	r1, [pc, #88]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	490e      	ldr	r1, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e2:	f000 f821 	bl	8001928 <HAL_RCC_GetSysClockFreq>
 80018e6:	4601      	mov	r1, r0
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	fa21 f303 	lsr.w	r3, r1, r3
 80018fa:	4a09      	ldr	r2, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1c4>)
 80018fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f924 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00
 8001918:	40023800 	.word	0x40023800
 800191c:	080061e8 	.word	0x080061e8
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004

08001928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b04      	cmp	r3, #4
 8001948:	d007      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x32>
 800194a:	2b08      	cmp	r3, #8
 800194c:	d008      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x38>
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 80b4 	bne.w	8001abc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001954:	4b5e      	ldr	r3, [pc, #376]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001956:	60bb      	str	r3, [r7, #8]
       break;
 8001958:	e0b3      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800195c:	60bb      	str	r3, [r7, #8]
      break;
 800195e:	e0b0      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001960:	4b5a      	ldr	r3, [pc, #360]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001968:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d04a      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001976:	4b55      	ldr	r3, [pc, #340]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	099b      	lsrs	r3, r3, #6
 800197c:	f04f 0400 	mov.w	r4, #0
 8001980:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	ea03 0501 	and.w	r5, r3, r1
 800198c:	ea04 0602 	and.w	r6, r4, r2
 8001990:	4629      	mov	r1, r5
 8001992:	4632      	mov	r2, r6
 8001994:	f04f 0300 	mov.w	r3, #0
 8001998:	f04f 0400 	mov.w	r4, #0
 800199c:	0154      	lsls	r4, r2, #5
 800199e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019a2:	014b      	lsls	r3, r1, #5
 80019a4:	4619      	mov	r1, r3
 80019a6:	4622      	mov	r2, r4
 80019a8:	1b49      	subs	r1, r1, r5
 80019aa:	eb62 0206 	sbc.w	r2, r2, r6
 80019ae:	f04f 0300 	mov.w	r3, #0
 80019b2:	f04f 0400 	mov.w	r4, #0
 80019b6:	0194      	lsls	r4, r2, #6
 80019b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019bc:	018b      	lsls	r3, r1, #6
 80019be:	1a5b      	subs	r3, r3, r1
 80019c0:	eb64 0402 	sbc.w	r4, r4, r2
 80019c4:	f04f 0100 	mov.w	r1, #0
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	00e2      	lsls	r2, r4, #3
 80019ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019d2:	00d9      	lsls	r1, r3, #3
 80019d4:	460b      	mov	r3, r1
 80019d6:	4614      	mov	r4, r2
 80019d8:	195b      	adds	r3, r3, r5
 80019da:	eb44 0406 	adc.w	r4, r4, r6
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	0262      	lsls	r2, r4, #9
 80019e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80019ec:	0259      	lsls	r1, r3, #9
 80019ee:	460b      	mov	r3, r1
 80019f0:	4614      	mov	r4, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	4621      	mov	r1, r4
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f04f 0400 	mov.w	r4, #0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4623      	mov	r3, r4
 8001a00:	f7fe fc86 	bl	8000310 <__aeabi_uldivmod>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	e049      	b.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	f04f 0400 	mov.w	r4, #0
 8001a16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	ea03 0501 	and.w	r5, r3, r1
 8001a22:	ea04 0602 	and.w	r6, r4, r2
 8001a26:	4629      	mov	r1, r5
 8001a28:	4632      	mov	r2, r6
 8001a2a:	f04f 0300 	mov.w	r3, #0
 8001a2e:	f04f 0400 	mov.w	r4, #0
 8001a32:	0154      	lsls	r4, r2, #5
 8001a34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a38:	014b      	lsls	r3, r1, #5
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	1b49      	subs	r1, r1, r5
 8001a40:	eb62 0206 	sbc.w	r2, r2, r6
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	f04f 0400 	mov.w	r4, #0
 8001a4c:	0194      	lsls	r4, r2, #6
 8001a4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a52:	018b      	lsls	r3, r1, #6
 8001a54:	1a5b      	subs	r3, r3, r1
 8001a56:	eb64 0402 	sbc.w	r4, r4, r2
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	f04f 0200 	mov.w	r2, #0
 8001a62:	00e2      	lsls	r2, r4, #3
 8001a64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a68:	00d9      	lsls	r1, r3, #3
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	195b      	adds	r3, r3, r5
 8001a70:	eb44 0406 	adc.w	r4, r4, r6
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	02a2      	lsls	r2, r4, #10
 8001a7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a82:	0299      	lsls	r1, r3, #10
 8001a84:	460b      	mov	r3, r1
 8001a86:	4614      	mov	r4, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f04f 0400 	mov.w	r4, #0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4623      	mov	r3, r4
 8001a96:	f7fe fc3b 	bl	8000310 <__aeabi_uldivmod>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001aa0:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	0c1b      	lsrs	r3, r3, #16
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	60bb      	str	r3, [r7, #8]
      break;
 8001aba:	e002      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001abe:	60bb      	str	r3, [r7, #8]
      break;
 8001ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	00f42400 	.word	0x00f42400
 8001ad4:	007a1200 	.word	0x007a1200

08001ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001adc:	4b03      	ldr	r3, [pc, #12]	; (8001aec <HAL_RCC_GetHCLKFreq+0x14>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000000 	.word	0x20000000

08001af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001af4:	f7ff fff0 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001af8:	4601      	mov	r1, r0
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	0a9b      	lsrs	r3, r3, #10
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	080061f8 	.word	0x080061f8

08001b18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	220f      	movs	r2, #15
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	08db      	lsrs	r3, r3, #3
 8001b52:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <HAL_RCC_GetClockConfig+0x60>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 020f 	and.w	r2, r3, #15
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40023c00 	.word	0x40023c00

08001b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e01d      	b.n	8001bca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f815 	bl	8001bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f000 f968 	bl	8001e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b06      	cmp	r3, #6
 8001c0e:	d007      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d122      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d11b      	bne.n	8001c8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f06f 0202 	mvn.w	r2, #2
 8001c5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8ee 	bl	8001e52 <HAL_TIM_IC_CaptureCallback>
 8001c76:	e005      	b.n	8001c84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8e0 	bl	8001e3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8f1 	bl	8001e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d122      	bne.n	8001cde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d11b      	bne.n	8001cde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f06f 0204 	mvn.w	r2, #4
 8001cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8c4 	bl	8001e52 <HAL_TIM_IC_CaptureCallback>
 8001cca:	e005      	b.n	8001cd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f8b6 	bl	8001e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 f8c7 	bl	8001e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d122      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11b      	bne.n	8001d32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f06f 0208 	mvn.w	r2, #8
 8001d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2204      	movs	r2, #4
 8001d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f89a 	bl	8001e52 <HAL_TIM_IC_CaptureCallback>
 8001d1e:	e005      	b.n	8001d2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 f88c 	bl	8001e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f89d 	bl	8001e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d122      	bne.n	8001d86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d11b      	bne.n	8001d86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0210 	mvn.w	r2, #16
 8001d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2208      	movs	r2, #8
 8001d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	69db      	ldr	r3, [r3, #28]
 8001d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f870 	bl	8001e52 <HAL_TIM_IC_CaptureCallback>
 8001d72:	e005      	b.n	8001d80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f862 	bl	8001e3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f873 	bl	8001e66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d10e      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0201 	mvn.w	r2, #1
 8001daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7fe fe8d 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dbc:	2b80      	cmp	r3, #128	; 0x80
 8001dbe:	d10e      	bne.n	8001dde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dca:	2b80      	cmp	r3, #128	; 0x80
 8001dcc:	d107      	bne.n	8001dde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f903 	bl	8001fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d10e      	bne.n	8001e0a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d107      	bne.n	8001e0a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f838 	bl	8001e7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b20      	cmp	r3, #32
 8001e16:	d10e      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f003 0320 	and.w	r3, r3, #32
 8001e22:	2b20      	cmp	r3, #32
 8001e24:	d107      	bne.n	8001e36 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f06f 0220 	mvn.w	r2, #32
 8001e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f8cd 	bl	8001fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d013      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d00f      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a3d      	ldr	r2, [pc, #244]	; (8001fa8 <TIM_Base_SetConfig+0x118>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00b      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3c      	ldr	r2, [pc, #240]	; (8001fac <TIM_Base_SetConfig+0x11c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	; (8001fb0 <TIM_Base_SetConfig+0x120>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_Base_SetConfig+0x40>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d108      	bne.n	8001ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a2f      	ldr	r2, [pc, #188]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d02b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ef0:	d027      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <TIM_Base_SetConfig+0x118>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d023      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <TIM_Base_SetConfig+0x11c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d01f      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <TIM_Base_SetConfig+0x120>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d01b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d017      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <TIM_Base_SetConfig+0x128>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <TIM_Base_SetConfig+0x12c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00f      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <TIM_Base_SetConfig+0x130>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00b      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <TIM_Base_SetConfig+0x134>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a24      	ldr	r2, [pc, #144]	; (8001fc8 <TIM_Base_SetConfig+0x138>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d003      	beq.n	8001f42 <TIM_Base_SetConfig+0xb2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <TIM_Base_SetConfig+0x13c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d108      	bne.n	8001f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	68fa      	ldr	r2, [r7, #12]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <TIM_Base_SetConfig+0x114>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d003      	beq.n	8001f88 <TIM_Base_SetConfig+0xf8>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0c      	ldr	r2, [pc, #48]	; (8001fb4 <TIM_Base_SetConfig+0x124>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d103      	bne.n	8001f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	615a      	str	r2, [r3, #20]
}
 8001f96:	bf00      	nop
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000
 8001fa8:	40000400 	.word	0x40000400
 8001fac:	40000800 	.word	0x40000800
 8001fb0:	40000c00 	.word	0x40000c00
 8001fb4:	40010400 	.word	0x40010400
 8001fb8:	40014000 	.word	0x40014000
 8001fbc:	40014400 	.word	0x40014400
 8001fc0:	40014800 	.word	0x40014800
 8001fc4:	40001800 	.word	0x40001800
 8001fc8:	40001c00 	.word	0x40001c00
 8001fcc:	40002000 	.word	0x40002000

08001fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f103 0208 	add.w	r2, r3, #8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0208 	add.w	r2, r3, #8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f103 0208 	add.w	r2, r3, #8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6892      	ldr	r2, [r2, #8]
 80020b0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6852      	ldr	r2, [r2, #4]
 80020ba:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d103      	bne.n	80020ce <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1e5a      	subs	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b08c      	sub	sp, #48	; 0x30
 80020f2:	af04      	add	r7, sp, #16
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4618      	mov	r0, r3
 8002104:	f000 ff06 	bl	8002f14 <pvPortMalloc>
 8002108:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002110:	2058      	movs	r0, #88	; 0x58
 8002112:	f000 feff 	bl	8002f14 <pvPortMalloc>
 8002116:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
 8002124:	e005      	b.n	8002132 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f000 ffd0 	bl	80030cc <vPortFree>
 800212c:	e001      	b.n	8002132 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002138:	88fa      	ldrh	r2, [r7, #6]
 800213a:	2300      	movs	r3, #0
 800213c:	9303      	str	r3, [sp, #12]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68b9      	ldr	r1, [r7, #8]
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f80e 	bl	8002170 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002154:	69f8      	ldr	r0, [r7, #28]
 8002156:	f000 f8a1 	bl	800229c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800215a:	2301      	movs	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	e002      	b.n	8002166 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002166:	69bb      	ldr	r3, [r7, #24]
    }
 8002168:	4618      	mov	r0, r3
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b088      	sub	sp, #32
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	461a      	mov	r2, r3
 8002188:	21a5      	movs	r1, #165	; 0xa5
 800218a:	f003 fb6f 	bl	800586c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002198:	3b01      	subs	r3, #1
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <prvInitialiseNewTask+0x56>
 80021b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b6:	f383 8811 	msr	BASEPRI, r3
 80021ba:	f3bf 8f6f 	isb	sy
 80021be:	f3bf 8f4f 	dsb	sy
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	e7fe      	b.n	80021c4 <prvInitialiseNewTask+0x54>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01f      	beq.n	800220c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e012      	b.n	80021f8 <prvInitialiseNewTask+0x88>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4413      	add	r3, r2
 80021d8:	7819      	ldrb	r1, [r3, #0]
 80021da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	4413      	add	r3, r2
 80021e0:	3334      	adds	r3, #52	; 0x34
 80021e2:	460a      	mov	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d006      	beq.n	8002200 <prvInitialiseNewTask+0x90>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3301      	adds	r3, #1
 80021f6:	61fb      	str	r3, [r7, #28]
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	2b09      	cmp	r3, #9
 80021fc:	d9e9      	bls.n	80021d2 <prvInitialiseNewTask+0x62>
 80021fe:	e000      	b.n	8002202 <prvInitialiseNewTask+0x92>
            {
                break;
 8002200:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800220a:	e003      	b.n	8002214 <prvInitialiseNewTask+0xa4>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	2b04      	cmp	r3, #4
 8002218:	d901      	bls.n	800221e <prvInitialiseNewTask+0xae>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800221a:	2304      	movs	r3, #4
 800221c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002228:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	2200      	movs	r2, #0
 800222e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002232:	3304      	adds	r3, #4
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff feff 	bl	8002038 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800223a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223c:	3318      	adds	r3, #24
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fefa 	bl	8002038 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002248:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800224a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224c:	f1c3 0205 	rsb	r2, r3, #5
 8002250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002252:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002258:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	3350      	adds	r3, #80	; 0x50
 800225e:	2204      	movs	r2, #4
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f003 fb02 	bl	800586c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	3354      	adds	r3, #84	; 0x54
 800226c:	2201      	movs	r2, #1
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f003 fafb 	bl	800586c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	69b8      	ldr	r0, [r7, #24]
 800227c:	f000 fb88 	bl	8002990 <pxPortInitialiseStack>
 8002280:	4602      	mov	r2, r0
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d002      	beq.n	8002292 <prvInitialiseNewTask+0x122>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002290:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002292:	bf00      	nop
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800229c:	b5b0      	push	{r4, r5, r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af02      	add	r7, sp, #8
 80022a2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80022a4:	f000 fd16 	bl	8002cd4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80022a8:	4b3b      	ldr	r3, [pc, #236]	; (8002398 <prvAddNewTaskToReadyList+0xfc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3301      	adds	r3, #1
 80022ae:	4a3a      	ldr	r2, [pc, #232]	; (8002398 <prvAddNewTaskToReadyList+0xfc>)
 80022b0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80022b2:	4b3a      	ldr	r3, [pc, #232]	; (800239c <prvAddNewTaskToReadyList+0x100>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80022ba:	4a38      	ldr	r2, [pc, #224]	; (800239c <prvAddNewTaskToReadyList+0x100>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <prvAddNewTaskToReadyList+0xfc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d110      	bne.n	80022ea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80022c8:	f000 faca 	bl	8002860 <prvInitialiseTaskLists>
 80022cc:	e00d      	b.n	80022ea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80022ce:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <prvAddNewTaskToReadyList+0x104>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80022d6:	4b31      	ldr	r3, [pc, #196]	; (800239c <prvAddNewTaskToReadyList+0x100>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d802      	bhi.n	80022ea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022e4:	4a2d      	ldr	r2, [pc, #180]	; (800239c <prvAddNewTaskToReadyList+0x100>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <prvAddNewTaskToReadyList+0x108>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3301      	adds	r3, #1
 80022f0:	4a2c      	ldr	r2, [pc, #176]	; (80023a4 <prvAddNewTaskToReadyList+0x108>)
 80022f2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022f4:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <prvAddNewTaskToReadyList+0x108>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <prvAddNewTaskToReadyList+0x94>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4618      	mov	r0, r3
 8002306:	f003 f833 	bl	8005370 <SEGGER_SYSVIEW_OnTaskCreate>
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	461d      	mov	r5, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461c      	mov	r4, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	1ae3      	subs	r3, r4, r3
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	462b      	mov	r3, r5
 800232c:	f001 f892 	bl	8003454 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4618      	mov	r0, r3
 8002334:	f003 f8a0 	bl	8005478 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	2201      	movs	r2, #1
 800233e:	409a      	lsls	r2, r3
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <prvAddNewTaskToReadyList+0x10c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4313      	orrs	r3, r2
 8002346:	4a18      	ldr	r2, [pc, #96]	; (80023a8 <prvAddNewTaskToReadyList+0x10c>)
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4a15      	ldr	r2, [pc, #84]	; (80023ac <prvAddNewTaskToReadyList+0x110>)
 8002358:	441a      	add	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3304      	adds	r3, #4
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7ff fe76 	bl	8002052 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002366:	f000 fce3 	bl	8002d30 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800236a:	4b0d      	ldr	r3, [pc, #52]	; (80023a0 <prvAddNewTaskToReadyList+0x104>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002372:	4b0a      	ldr	r3, [pc, #40]	; (800239c <prvAddNewTaskToReadyList+0x100>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	429a      	cmp	r2, r3
 800237e:	d207      	bcs.n	8002390 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <prvAddNewTaskToReadyList+0x114>)
 8002382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002390:	bf00      	nop
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bdb0      	pop	{r4, r5, r7, pc}
 8002398:	20000174 	.word	0x20000174
 800239c:	2000009c 	.word	0x2000009c
 80023a0:	20000180 	.word	0x20000180
 80023a4:	20000190 	.word	0x20000190
 80023a8:	2000017c 	.word	0x2000017c
 80023ac:	200000a0 	.word	0x200000a0
 80023b0:	e000ed04 	.word	0xe000ed04

080023b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <vTaskStartScheduler+0x94>)
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2300      	movs	r3, #0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	2282      	movs	r2, #130	; 0x82
 80023c6:	4921      	ldr	r1, [pc, #132]	; (800244c <vTaskStartScheduler+0x98>)
 80023c8:	4821      	ldr	r0, [pc, #132]	; (8002450 <vTaskStartScheduler+0x9c>)
 80023ca:	f7ff fe90 	bl	80020ee <xTaskCreate>
 80023ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d123      	bne.n	800241e <vTaskStartScheduler+0x6a>
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	60bb      	str	r3, [r7, #8]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80023e8:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <vTaskStartScheduler+0xa0>)
 80023ea:	f04f 32ff 	mov.w	r2, #4294967295
 80023ee:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <vTaskStartScheduler+0xa4>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <vTaskStartScheduler+0xa8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <vTaskStartScheduler+0xac>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <vTaskStartScheduler+0x94>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d102      	bne.n	800240e <vTaskStartScheduler+0x5a>
 8002408:	f002 ff96 	bl	8005338 <SEGGER_SYSVIEW_OnIdle>
 800240c:	e004      	b.n	8002418 <vTaskStartScheduler+0x64>
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <vTaskStartScheduler+0xac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f002 ffee 	bl	80053f4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002418:	f000 fb44 	bl	8002aa4 <xPortStartScheduler>
 800241c:	e00d      	b.n	800243a <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d109      	bne.n	800243a <vTaskStartScheduler+0x86>
 8002426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	e7fe      	b.n	8002438 <vTaskStartScheduler+0x84>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <vTaskStartScheduler+0xb0>)
 800243c:	681b      	ldr	r3, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000198 	.word	0x20000198
 800244c:	08006114 	.word	0x08006114
 8002450:	08002831 	.word	0x08002831
 8002454:	20000194 	.word	0x20000194
 8002458:	20000180 	.word	0x20000180
 800245c:	20000178 	.word	0x20000178
 8002460:	2000009c 	.word	0x2000009c
 8002464:	2000000c 	.word	0x2000000c

08002468 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <vTaskSuspendAll+0x18>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3301      	adds	r3, #1
 8002472:	4a03      	ldr	r2, [pc, #12]	; (8002480 <vTaskSuspendAll+0x18>)
 8002474:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	2000019c 	.word	0x2000019c

08002484 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002492:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <xTaskResumeAll+0x11c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d109      	bne.n	80024ae <xTaskResumeAll+0x2a>
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	e7fe      	b.n	80024ac <xTaskResumeAll+0x28>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80024ae:	f000 fc11 	bl	8002cd4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80024b2:	4b3b      	ldr	r3, [pc, #236]	; (80025a0 <xTaskResumeAll+0x11c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	4a39      	ldr	r2, [pc, #228]	; (80025a0 <xTaskResumeAll+0x11c>)
 80024ba:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024bc:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <xTaskResumeAll+0x11c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d165      	bne.n	8002590 <xTaskResumeAll+0x10c>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024c4:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <xTaskResumeAll+0x120>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d061      	beq.n	8002590 <xTaskResumeAll+0x10c>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024cc:	e032      	b.n	8002534 <xTaskResumeAll+0xb0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <xTaskResumeAll+0x124>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3318      	adds	r3, #24
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fddd 	bl	800209a <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	3304      	adds	r3, #4
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff fdd8 	bl	800209a <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 ffc3 	bl	8005478 <SEGGER_SYSVIEW_OnTaskStartReady>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	2201      	movs	r2, #1
 80024f8:	409a      	lsls	r2, r3
 80024fa:	4b2c      	ldr	r3, [pc, #176]	; (80025ac <xTaskResumeAll+0x128>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <xTaskResumeAll+0x128>)
 8002502:	6013      	str	r3, [r2, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <xTaskResumeAll+0x12c>)
 8002512:	441a      	add	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3304      	adds	r3, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f7ff fd99 	bl	8002052 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <xTaskResumeAll+0x130>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <xTaskResumeAll+0xb0>
                    {
                        xYieldPending = pdTRUE;
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <xTaskResumeAll+0x134>)
 8002530:	2201      	movs	r2, #1
 8002532:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002534:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <xTaskResumeAll+0x124>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1c8      	bne.n	80024ce <xTaskResumeAll+0x4a>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <xTaskResumeAll+0xc2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002542:	f000 fa09 	bl	8002958 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <xTaskResumeAll+0x138>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <xTaskResumeAll+0xf0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002552:	f000 f849 	bl	80025e8 <xTaskIncrementTick>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <xTaskResumeAll+0xde>
                            {
                                xYieldPending = pdTRUE;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <xTaskResumeAll+0x134>)
 800255e:	2201      	movs	r2, #1
 8002560:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3b01      	subs	r3, #1
 8002566:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f1      	bne.n	8002552 <xTaskResumeAll+0xce>

                        xPendedTicks = 0;
 800256e:	4b13      	ldr	r3, [pc, #76]	; (80025bc <xTaskResumeAll+0x138>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002574:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <xTaskResumeAll+0x134>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d009      	beq.n	8002590 <xTaskResumeAll+0x10c>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800257c:	2301      	movs	r3, #1
 800257e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002580:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <xTaskResumeAll+0x13c>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002590:	f000 fbce 	bl	8002d30 <vPortExitCritical>

    return xAlreadyYielded;
 8002594:	68bb      	ldr	r3, [r7, #8]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	2000019c 	.word	0x2000019c
 80025a4:	20000174 	.word	0x20000174
 80025a8:	20000134 	.word	0x20000134
 80025ac:	2000017c 	.word	0x2000017c
 80025b0:	200000a0 	.word	0x200000a0
 80025b4:	2000009c 	.word	0x2000009c
 80025b8:	20000188 	.word	0x20000188
 80025bc:	20000184 	.word	0x20000184
 80025c0:	e000ed04 	.word	0xe000ed04

080025c4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025ca:	f000 fc65 	bl	8002e98 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80025ce:	2300      	movs	r3, #0
 80025d0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80025d2:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <xTaskGetTickCountFromISR+0x20>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80025d8:	683b      	ldr	r3, [r7, #0]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000178 	.word	0x20000178

080025e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <xTaskIncrementTick+0x14c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f040 8091 	bne.w	800271e <xTaskIncrementTick+0x136>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80025fc:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <xTaskIncrementTick+0x150>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002604:	4a4c      	ldr	r2, [pc, #304]	; (8002738 <xTaskIncrementTick+0x150>)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d11f      	bne.n	8002650 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <xTaskIncrementTick+0x154>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <xTaskIncrementTick+0x46>
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	e7fe      	b.n	800262c <xTaskIncrementTick+0x44>
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <xTaskIncrementTick+0x154>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	4b42      	ldr	r3, [pc, #264]	; (8002740 <xTaskIncrementTick+0x158>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a40      	ldr	r2, [pc, #256]	; (800273c <xTaskIncrementTick+0x154>)
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4a40      	ldr	r2, [pc, #256]	; (8002740 <xTaskIncrementTick+0x158>)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	4b40      	ldr	r3, [pc, #256]	; (8002744 <xTaskIncrementTick+0x15c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3301      	adds	r3, #1
 8002648:	4a3e      	ldr	r2, [pc, #248]	; (8002744 <xTaskIncrementTick+0x15c>)
 800264a:	6013      	str	r3, [r2, #0]
 800264c:	f000 f984 	bl	8002958 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002650:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <xTaskIncrementTick+0x160>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	429a      	cmp	r2, r3
 8002658:	d34c      	bcc.n	80026f4 <xTaskIncrementTick+0x10c>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800265a:	4b38      	ldr	r3, [pc, #224]	; (800273c <xTaskIncrementTick+0x154>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002664:	4b38      	ldr	r3, [pc, #224]	; (8002748 <xTaskIncrementTick+0x160>)
 8002666:	f04f 32ff 	mov.w	r2, #4294967295
 800266a:	601a      	str	r2, [r3, #0]
                    break;
 800266c:	e042      	b.n	80026f4 <xTaskIncrementTick+0x10c>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <xTaskIncrementTick+0x154>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	429a      	cmp	r2, r3
 8002684:	d203      	bcs.n	800268e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002686:	4a30      	ldr	r2, [pc, #192]	; (8002748 <xTaskIncrementTick+0x160>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800268c:	e032      	b.n	80026f4 <xTaskIncrementTick+0x10c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	3304      	adds	r3, #4
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fd01 	bl	800209a <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	3318      	adds	r3, #24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff fcf8 	bl	800209a <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f002 fee3 	bl	8005478 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	2201      	movs	r2, #1
 80026b8:	409a      	lsls	r2, r3
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <xTaskIncrementTick+0x164>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4313      	orrs	r3, r2
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <xTaskIncrementTick+0x164>)
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4a1f      	ldr	r2, [pc, #124]	; (8002750 <xTaskIncrementTick+0x168>)
 80026d2:	441a      	add	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	3304      	adds	r3, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4610      	mov	r0, r2
 80026dc:	f7ff fcb9 	bl	8002052 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e4:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <xTaskIncrementTick+0x16c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d3b5      	bcc.n	800265a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026f2:	e7b2      	b.n	800265a <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <xTaskIncrementTick+0x16c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fa:	4915      	ldr	r1, [pc, #84]	; (8002750 <xTaskIncrementTick+0x168>)
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d901      	bls.n	8002710 <xTaskIncrementTick+0x128>
                {
                    xSwitchRequired = pdTRUE;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002710:	4b11      	ldr	r3, [pc, #68]	; (8002758 <xTaskIncrementTick+0x170>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <xTaskIncrementTick+0x140>
                {
                    xSwitchRequired = pdTRUE;
 8002718:	2301      	movs	r3, #1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	e004      	b.n	8002728 <xTaskIncrementTick+0x140>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800271e:	4b0f      	ldr	r3, [pc, #60]	; (800275c <xTaskIncrementTick+0x174>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <xTaskIncrementTick+0x174>)
 8002726:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002728:	697b      	ldr	r3, [r7, #20]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000019c 	.word	0x2000019c
 8002738:	20000178 	.word	0x20000178
 800273c:	2000012c 	.word	0x2000012c
 8002740:	20000130 	.word	0x20000130
 8002744:	2000018c 	.word	0x2000018c
 8002748:	20000194 	.word	0x20000194
 800274c:	2000017c 	.word	0x2000017c
 8002750:	200000a0 	.word	0x200000a0
 8002754:	2000009c 	.word	0x2000009c
 8002758:	20000188 	.word	0x20000188
 800275c:	20000184 	.word	0x20000184

08002760 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <vTaskSwitchContext+0xb8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <vTaskSwitchContext+0xbc>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002774:	e04c      	b.n	8002810 <vTaskSwitchContext+0xb0>
        xYieldPending = pdFALSE;
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <vTaskSwitchContext+0xbc>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <vTaskSwitchContext+0xc0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	fab3 f383 	clz	r3, r3
 8002788:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	f1c3 031f 	rsb	r3, r3, #31
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	4924      	ldr	r1, [pc, #144]	; (8002824 <vTaskSwitchContext+0xc4>)
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <vTaskSwitchContext+0x5a>
        __asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	607b      	str	r3, [r7, #4]
 80027b8:	e7fe      	b.n	80027b8 <vTaskSwitchContext+0x58>
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <vTaskSwitchContext+0xc4>)
 80027c6:	4413      	add	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	3308      	adds	r3, #8
 80027dc:	429a      	cmp	r2, r3
 80027de:	d104      	bne.n	80027ea <vTaskSwitchContext+0x8a>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <vTaskSwitchContext+0xc8>)
 80027f2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <vTaskSwitchContext+0xc8>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <vTaskSwitchContext+0xcc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d102      	bne.n	8002806 <vTaskSwitchContext+0xa6>
 8002800:	f002 fd9a 	bl	8005338 <SEGGER_SYSVIEW_OnIdle>
}
 8002804:	e004      	b.n	8002810 <vTaskSwitchContext+0xb0>
        traceTASK_SWITCHED_IN();
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <vTaskSwitchContext+0xc8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f002 fdf2 	bl	80053f4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002810:	bf00      	nop
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000019c 	.word	0x2000019c
 800281c:	20000188 	.word	0x20000188
 8002820:	2000017c 	.word	0x2000017c
 8002824:	200000a0 	.word	0x200000a0
 8002828:	2000009c 	.word	0x2000009c
 800282c:	20000198 	.word	0x20000198

08002830 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002838:	f000 f852 	bl	80028e0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <prvIdleTask+0x28>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d9f9      	bls.n	8002838 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <prvIdleTask+0x2c>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002854:	e7f0      	b.n	8002838 <prvIdleTask+0x8>
 8002856:	bf00      	nop
 8002858:	200000a0 	.word	0x200000a0
 800285c:	e000ed04 	.word	0xe000ed04

08002860 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	e00c      	b.n	8002886 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <prvInitialiseTaskLists+0x60>)
 8002878:	4413      	add	r3, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fbbc 	bl	8001ff8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3301      	adds	r3, #1
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d9ef      	bls.n	800286c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <prvInitialiseTaskLists+0x64>)
 800288e:	f7ff fbb3 	bl	8001ff8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002892:	480d      	ldr	r0, [pc, #52]	; (80028c8 <prvInitialiseTaskLists+0x68>)
 8002894:	f7ff fbb0 	bl	8001ff8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <prvInitialiseTaskLists+0x6c>)
 800289a:	f7ff fbad 	bl	8001ff8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800289e:	480c      	ldr	r0, [pc, #48]	; (80028d0 <prvInitialiseTaskLists+0x70>)
 80028a0:	f7ff fbaa 	bl	8001ff8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80028a4:	480b      	ldr	r0, [pc, #44]	; (80028d4 <prvInitialiseTaskLists+0x74>)
 80028a6:	f7ff fba7 	bl	8001ff8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <prvInitialiseTaskLists+0x78>)
 80028ac:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <prvInitialiseTaskLists+0x64>)
 80028ae:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <prvInitialiseTaskLists+0x7c>)
 80028b2:	4a05      	ldr	r2, [pc, #20]	; (80028c8 <prvInitialiseTaskLists+0x68>)
 80028b4:	601a      	str	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200000a0 	.word	0x200000a0
 80028c4:	20000104 	.word	0x20000104
 80028c8:	20000118 	.word	0x20000118
 80028cc:	20000134 	.word	0x20000134
 80028d0:	20000148 	.word	0x20000148
 80028d4:	20000160 	.word	0x20000160
 80028d8:	2000012c 	.word	0x2000012c
 80028dc:	20000130 	.word	0x20000130

080028e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80028e6:	e019      	b.n	800291c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80028e8:	f000 f9f4 	bl	8002cd4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <prvCheckTasksWaitingTermination+0x4c>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3304      	adds	r3, #4
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff fbce 	bl	800209a <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80028fe:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <prvCheckTasksWaitingTermination+0x50>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <prvCheckTasksWaitingTermination+0x50>)
 8002906:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <prvCheckTasksWaitingTermination+0x54>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <prvCheckTasksWaitingTermination+0x54>)
 8002910:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002912:	f000 fa0d 	bl	8002d30 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 f80e 	bl	8002938 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <prvCheckTasksWaitingTermination+0x54>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1e1      	bne.n	80028e8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	20000148 	.word	0x20000148
 8002930:	20000174 	.word	0x20000174
 8002934:	2000015c 	.word	0x2000015c

08002938 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fbc1 	bl	80030cc <vPortFree>
                vPortFree( pxTCB );
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fbbe 	bl	80030cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002950:	bf00      	nop
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800295c:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <prvResetNextTaskUnblockTime+0x30>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <prvResetNextTaskUnblockTime+0x34>)
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800296e:	e005      	b.n	800297c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <prvResetNextTaskUnblockTime+0x30>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a04      	ldr	r2, [pc, #16]	; (800298c <prvResetNextTaskUnblockTime+0x34>)
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	2000012c 	.word	0x2000012c
 800298c:	20000194 	.word	0x20000194

08002990 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	3b04      	subs	r3, #4
 80029a0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3b04      	subs	r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	f023 0201 	bic.w	r2, r3, #1
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	3b04      	subs	r3, #4
 80029be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80029c0:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <pxPortInitialiseStack+0x64>)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	3b14      	subs	r3, #20
 80029ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	3b04      	subs	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f06f 0202 	mvn.w	r2, #2
 80029de:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3b20      	subs	r3, #32
 80029e4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80029e6:	68fb      	ldr	r3, [r7, #12]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3714      	adds	r7, #20
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	080029f9 	.word	0x080029f9

080029f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a02:	4b11      	ldr	r3, [pc, #68]	; (8002a48 <prvTaskExitError+0x50>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0a:	d009      	beq.n	8002a20 <prvTaskExitError+0x28>
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	e7fe      	b.n	8002a1e <prvTaskExitError+0x26>
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	60bb      	str	r3, [r7, #8]
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a32:	bf00      	nop
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0fc      	beq.n	8002a34 <prvTaskExitError+0x3c>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000010 	.word	0x20000010
 8002a4c:	00000000 	.word	0x00000000

08002a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <pxCurrentTCBConst2>)
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	6808      	ldr	r0, [r1, #0]
 8002a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5a:	f380 8809 	msr	PSP, r0
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f380 8811 	msr	BASEPRI, r0
 8002a6a:	4770      	bx	lr
 8002a6c:	f3af 8000 	nop.w

08002a70 <pxCurrentTCBConst2>:
 8002a70:	2000009c 	.word	0x2000009c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop

08002a78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002a78:	4808      	ldr	r0, [pc, #32]	; (8002a9c <prvPortStartFirstTask+0x24>)
 8002a7a:	6800      	ldr	r0, [r0, #0]
 8002a7c:	6800      	ldr	r0, [r0, #0]
 8002a7e:	f380 8808 	msr	MSP, r0
 8002a82:	f04f 0000 	mov.w	r0, #0
 8002a86:	f380 8814 	msr	CONTROL, r0
 8002a8a:	b662      	cpsie	i
 8002a8c:	b661      	cpsie	f
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	df00      	svc	0
 8002a98:	bf00      	nop
 8002a9a:	0000      	.short	0x0000
 8002a9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop

08002aa4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002aaa:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <xPortStartScheduler+0x118>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <xPortStartScheduler+0x11c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d109      	bne.n	8002ac8 <xPortStartScheduler+0x24>
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	e7fe      	b.n	8002ac6 <xPortStartScheduler+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <xPortStartScheduler+0x118>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a3d      	ldr	r2, [pc, #244]	; (8002bc4 <xPortStartScheduler+0x120>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d109      	bne.n	8002ae6 <xPortStartScheduler+0x42>
 8002ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e7fe      	b.n	8002ae4 <xPortStartScheduler+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <xPortStartScheduler+0x124>)
 8002ae8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	22ff      	movs	r2, #255	; 0xff
 8002af6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b30      	ldr	r3, [pc, #192]	; (8002bcc <xPortStartScheduler+0x128>)
 8002b0c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b10:	2207      	movs	r2, #7
 8002b12:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b14:	e009      	b.n	8002b2a <xPortStartScheduler+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002b16:	4b2e      	ldr	r3, [pc, #184]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	4a2c      	ldr	r2, [pc, #176]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b1e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b2a:	78fb      	ldrb	r3, [r7, #3]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b32:	2b80      	cmp	r3, #128	; 0x80
 8002b34:	d0ef      	beq.n	8002b16 <xPortStartScheduler+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f1c3 0307 	rsb	r3, r3, #7
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d009      	beq.n	8002b56 <xPortStartScheduler+0xb2>
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	e7fe      	b.n	8002b54 <xPortStartScheduler+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	021b      	lsls	r3, r3, #8
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b5e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b68:	4a19      	ldr	r2, [pc, #100]	; (8002bd0 <xPortStartScheduler+0x12c>)
 8002b6a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002b74:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <xPortStartScheduler+0x130>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a16      	ldr	r2, [pc, #88]	; (8002bd4 <xPortStartScheduler+0x130>)
 8002b7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b7e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002b80:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <xPortStartScheduler+0x130>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <xPortStartScheduler+0x130>)
 8002b86:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002b8c:	f000 f954 	bl	8002e38 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <xPortStartScheduler+0x134>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002b96:	f000 f973 	bl	8002e80 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <xPortStartScheduler+0x138>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <xPortStartScheduler+0x138>)
 8002ba0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002ba4:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002ba6:	f7ff ff67 	bl	8002a78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002baa:	f7ff fdd9 	bl	8002760 <vTaskSwitchContext>
    prvTaskExitError();
 8002bae:	f7ff ff23 	bl	80029f8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3718      	adds	r7, #24
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	e000ed00 	.word	0xe000ed00
 8002bc0:	410fc271 	.word	0x410fc271
 8002bc4:	410fc270 	.word	0x410fc270
 8002bc8:	e000e400 	.word	0xe000e400
 8002bcc:	200001a0 	.word	0x200001a0
 8002bd0:	200001a4 	.word	0x200001a4
 8002bd4:	e000ed20 	.word	0xe000ed20
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	e000ef34 	.word	0xe000ef34

08002be0 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002be6:	4b35      	ldr	r3, [pc, #212]	; (8002cbc <vInitPrioGroupValue+0xdc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a35      	ldr	r2, [pc, #212]	; (8002cc0 <vInitPrioGroupValue+0xe0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d109      	bne.n	8002c04 <vInitPrioGroupValue+0x24>
 8002bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	e7fe      	b.n	8002c02 <vInitPrioGroupValue+0x22>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <vInitPrioGroupValue+0xdc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <vInitPrioGroupValue+0xe4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d109      	bne.n	8002c22 <vInitPrioGroupValue+0x42>
 8002c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e7fe      	b.n	8002c20 <vInitPrioGroupValue+0x40>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002c22:	4b29      	ldr	r3, [pc, #164]	; (8002cc8 <vInitPrioGroupValue+0xe8>)
 8002c24:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	22ff      	movs	r2, #255	; 0xff
 8002c32:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <vInitPrioGroupValue+0xec>)
 8002c48:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002c4a:	4b21      	ldr	r3, [pc, #132]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c50:	e009      	b.n	8002c66 <vInitPrioGroupValue+0x86>
            {
                ulMaxPRIGROUPValue--;
 8002c52:	4b1f      	ldr	r3, [pc, #124]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002c5a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6e:	2b80      	cmp	r3, #128	; 0x80
 8002c70:	d0ef      	beq.n	8002c52 <vInitPrioGroupValue+0x72>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f1c3 0307 	rsb	r3, r3, #7
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d009      	beq.n	8002c92 <vInitPrioGroupValue+0xb2>
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	e7fe      	b.n	8002c90 <vInitPrioGroupValue+0xb0>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	021b      	lsls	r3, r3, #8
 8002c98:	4a0d      	ldr	r2, [pc, #52]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002c9a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	; (8002cd0 <vInitPrioGroupValue+0xf0>)
 8002ca6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002cb0:	bf00      	nop
 8002cb2:	371c      	adds	r7, #28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00
 8002cc0:	410fc271 	.word	0x410fc271
 8002cc4:	410fc270 	.word	0x410fc270
 8002cc8:	e000e400 	.word	0xe000e400
 8002ccc:	200001a0 	.word	0x200001a0
 8002cd0:	200001a4 	.word	0x200001a4

08002cd4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cde:	f383 8811 	msr	BASEPRI, r3
 8002ce2:	f3bf 8f6f 	isb	sy
 8002ce6:	f3bf 8f4f 	dsb	sy
 8002cea:	607b      	str	r3, [r7, #4]
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002cec:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <vPortEnterCritical+0x54>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <vPortEnterCritical+0x54>)
 8002cf4:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <vPortEnterCritical+0x54>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d10e      	bne.n	8002d1c <vPortEnterCritical+0x48>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <vPortEnterCritical+0x58>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d009      	beq.n	8002d1c <vPortEnterCritical+0x48>
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	e7fe      	b.n	8002d1a <vPortEnterCritical+0x46>
    }
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	20000010 	.word	0x20000010
 8002d2c:	e000ed04 	.word	0xe000ed04

08002d30 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002d36:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <vPortExitCritical+0x4c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <vPortExitCritical+0x22>
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	e7fe      	b.n	8002d50 <vPortExitCritical+0x20>
    uxCriticalNesting--;
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <vPortExitCritical+0x4c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	4a08      	ldr	r2, [pc, #32]	; (8002d7c <vPortExitCritical+0x4c>)
 8002d5a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <vPortExitCritical+0x4c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d104      	bne.n	8002d6e <vPortExitCritical+0x3e>
 8002d64:	2300      	movs	r3, #0
 8002d66:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000010 	.word	0x20000010

08002d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002d80:	f3ef 8009 	mrs	r0, PSP
 8002d84:	f3bf 8f6f 	isb	sy
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <pxCurrentTCBConst>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	f01e 0f10 	tst.w	lr, #16
 8002d90:	bf08      	it	eq
 8002d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d9a:	6010      	str	r0, [r2, #0]
 8002d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002da4:	f380 8811 	msr	BASEPRI, r0
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f7ff fcd6 	bl	8002760 <vTaskSwitchContext>
 8002db4:	f04f 0000 	mov.w	r0, #0
 8002db8:	f380 8811 	msr	BASEPRI, r0
 8002dbc:	bc09      	pop	{r0, r3}
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	6808      	ldr	r0, [r1, #0]
 8002dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc6:	f01e 0f10 	tst.w	lr, #16
 8002dca:	bf08      	it	eq
 8002dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002dd0:	f380 8809 	msr	PSP, r0
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	f3af 8000 	nop.w

08002de0 <pxCurrentTCBConst>:
 8002de0:	2000009c 	.word	0x2000009c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop

08002de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
        __asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	607b      	str	r3, [r7, #4]
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002e00:	f002 fa20 	bl	8005244 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002e04:	f7ff fbf0 	bl	80025e8 <xTaskIncrementTick>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <SysTick_Handler+0x34>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002e0e:	f002 fa77 	bl	8005300 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <SysTick_Handler+0x4c>)
 8002e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e001      	b.n	8002e20 <SysTick_Handler+0x38>
        }
		else
		{
			traceISR_EXIT();
 8002e1c:	f002 fa54 	bl	80052c8 <SEGGER_SYSVIEW_RecordExitISR>
 8002e20:	2300      	movs	r3, #0
 8002e22:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	f383 8811 	msr	BASEPRI, r3
		}
    }
    portENABLE_INTERRUPTS();
}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	e000ed04 	.word	0xe000ed04

08002e38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002e3c:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <vPortSetupTimerInterrupt+0x34>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <vPortSetupTimerInterrupt+0x38>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002e48:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <vPortSetupTimerInterrupt+0x3c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <vPortSetupTimerInterrupt+0x40>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	099b      	lsrs	r3, r3, #6
 8002e54:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <vPortSetupTimerInterrupt+0x44>)
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002e5a:	4b04      	ldr	r3, [pc, #16]	; (8002e6c <vPortSetupTimerInterrupt+0x34>)
 8002e5c:	2207      	movs	r2, #7
 8002e5e:	601a      	str	r2, [r3, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000e010 	.word	0xe000e010
 8002e70:	e000e018 	.word	0xe000e018
 8002e74:	20000000 	.word	0x20000000
 8002e78:	10624dd3 	.word	0x10624dd3
 8002e7c:	e000e014 	.word	0xe000e014

08002e80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002e80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002e90 <vPortEnableVFP+0x10>
 8002e84:	6801      	ldr	r1, [r0, #0]
 8002e86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002e8a:	6001      	str	r1, [r0, #0]
 8002e8c:	4770      	bx	lr
 8002e8e:	0000      	.short	0x0000
 8002e90:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop

08002e98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002e9e:	f3ef 8305 	mrs	r3, IPSR
 8002ea2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	d913      	bls.n	8002ed2 <vPortValidateInterruptPriority+0x3a>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002eaa:	4a16      	ldr	r2, [pc, #88]	; (8002f04 <vPortValidateInterruptPriority+0x6c>)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <vPortValidateInterruptPriority+0x70>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	7afa      	ldrb	r2, [r7, #11]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d209      	bcs.n	8002ed2 <vPortValidateInterruptPriority+0x3a>
        __asm volatile
 8002ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec2:	f383 8811 	msr	BASEPRI, r3
 8002ec6:	f3bf 8f6f 	isb	sy
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e7fe      	b.n	8002ed0 <vPortValidateInterruptPriority+0x38>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <vPortValidateInterruptPriority+0x74>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <vPortValidateInterruptPriority+0x78>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d909      	bls.n	8002ef6 <vPortValidateInterruptPriority+0x5e>
 8002ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee6:	f383 8811 	msr	BASEPRI, r3
 8002eea:	f3bf 8f6f 	isb	sy
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	e7fe      	b.n	8002ef4 <vPortValidateInterruptPriority+0x5c>
    }
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000e3f0 	.word	0xe000e3f0
 8002f08:	200001a0 	.word	0x200001a0
 8002f0c:	e000ed0c 	.word	0xe000ed0c
 8002f10:	200001a4 	.word	0x200001a4

08002f14 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002f20:	f7ff faa2 	bl	8002468 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002f24:	4b63      	ldr	r3, [pc, #396]	; (80030b4 <pvPortMalloc+0x1a0>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002f2c:	f000 f92e 	bl	800318c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f30:	4b61      	ldr	r3, [pc, #388]	; (80030b8 <pvPortMalloc+0x1a4>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 80a5 	bne.w	8003088 <pvPortMalloc+0x174>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02c      	beq.n	8002f9e <pvPortMalloc+0x8a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002f44:	2208      	movs	r2, #8
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d226      	bcs.n	8002f9e <pvPortMalloc+0x8a>
            {
                xWantedSize += xHeapStructSize;
 8002f50:	2208      	movs	r2, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4413      	add	r3, r2
 8002f56:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d020      	beq.n	8002fa4 <pvPortMalloc+0x90>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f023 0307 	bic.w	r3, r3, #7
 8002f68:	3308      	adds	r3, #8
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d213      	bcs.n	8002f98 <pvPortMalloc+0x84>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f023 0307 	bic.w	r3, r3, #7
 8002f76:	3308      	adds	r3, #8
 8002f78:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00f      	beq.n	8002fa4 <pvPortMalloc+0x90>
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	e7fe      	b.n	8002f96 <pvPortMalloc+0x82>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f9c:	e002      	b.n	8002fa4 <pvPortMalloc+0x90>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	607b      	str	r3, [r7, #4]
 8002fa2:	e000      	b.n	8002fa6 <pvPortMalloc+0x92>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002fa4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d06d      	beq.n	8003088 <pvPortMalloc+0x174>
 8002fac:	4b43      	ldr	r3, [pc, #268]	; (80030bc <pvPortMalloc+0x1a8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d868      	bhi.n	8003088 <pvPortMalloc+0x174>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002fb6:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <pvPortMalloc+0x1ac>)
 8002fb8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <pvPortMalloc+0x1ac>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fc0:	e004      	b.n	8002fcc <pvPortMalloc+0xb8>
                {
                    pxPreviousBlock = pxBlock;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d903      	bls.n	8002fde <pvPortMalloc+0xca>
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f1      	bne.n	8002fc2 <pvPortMalloc+0xae>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002fde:	4b35      	ldr	r3, [pc, #212]	; (80030b4 <pvPortMalloc+0x1a0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d04f      	beq.n	8003088 <pvPortMalloc+0x174>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	4413      	add	r3, r2
 8002ff0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	2308      	movs	r3, #8
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	429a      	cmp	r2, r3
 8003008:	d91e      	bls.n	8003048 <pvPortMalloc+0x134>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <pvPortMalloc+0x11c>
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	e7fe      	b.n	800302e <pvPortMalloc+0x11a>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad2      	subs	r2, r2, r3
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003042:	69b8      	ldr	r0, [r7, #24]
 8003044:	f000 f904 	bl	8003250 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003048:	4b1c      	ldr	r3, [pc, #112]	; (80030bc <pvPortMalloc+0x1a8>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	4a1a      	ldr	r2, [pc, #104]	; (80030bc <pvPortMalloc+0x1a8>)
 8003054:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003056:	4b19      	ldr	r3, [pc, #100]	; (80030bc <pvPortMalloc+0x1a8>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <pvPortMalloc+0x1b0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d203      	bcs.n	800306a <pvPortMalloc+0x156>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <pvPortMalloc+0x1a8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <pvPortMalloc+0x1b0>)
 8003068:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <pvPortMalloc+0x1a4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	431a      	orrs	r2, r3
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <pvPortMalloc+0x1b4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3301      	adds	r3, #1
 8003084:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <pvPortMalloc+0x1b4>)
 8003086:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003088:	f7ff f9fc 	bl	8002484 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <pvPortMalloc+0x196>
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	e7fe      	b.n	80030a8 <pvPortMalloc+0x194>
    return pvReturn;
 80030aa:	69fb      	ldr	r3, [r7, #28]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3728      	adds	r7, #40	; 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20012db0 	.word	0x20012db0
 80030b8:	20012dc4 	.word	0x20012dc4
 80030bc:	20012db4 	.word	0x20012db4
 80030c0:	20012da8 	.word	0x20012da8
 80030c4:	20012db8 	.word	0x20012db8
 80030c8:	20012dbc 	.word	0x20012dbc

080030cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d04b      	beq.n	8003176 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80030de:	2308      	movs	r3, #8
 80030e0:	425b      	negs	r3, r3
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	4413      	add	r3, r2
 80030e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4b23      	ldr	r3, [pc, #140]	; (8003180 <vPortFree+0xb4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <vPortFree+0x42>
 80030fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e7fe      	b.n	800310c <vPortFree+0x40>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <vPortFree+0x5e>
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	e7fe      	b.n	8003128 <vPortFree+0x5c>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	4b14      	ldr	r3, [pc, #80]	; (8003180 <vPortFree+0xb4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01e      	beq.n	8003176 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d11a      	bne.n	8003176 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <vPortFree+0xb4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003150:	f7ff f98a 	bl	8002468 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <vPortFree+0xb8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4413      	add	r3, r2
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <vPortFree+0xb8>)
 8003160:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003162:	6938      	ldr	r0, [r7, #16]
 8003164:	f000 f874 	bl	8003250 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003168:	4b07      	ldr	r3, [pc, #28]	; (8003188 <vPortFree+0xbc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	4a06      	ldr	r2, [pc, #24]	; (8003188 <vPortFree+0xbc>)
 8003170:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003172:	f7ff f987 	bl	8002484 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20012dc4 	.word	0x20012dc4
 8003184:	20012db4 	.word	0x20012db4
 8003188:	20012dc0 	.word	0x20012dc0

0800318c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003192:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003196:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003198:	4b27      	ldr	r3, [pc, #156]	; (8003238 <prvHeapInit+0xac>)
 800319a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	3307      	adds	r3, #7
 80031aa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 0307 	bic.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	4a1f      	ldr	r2, [pc, #124]	; (8003238 <prvHeapInit+0xac>)
 80031bc:	4413      	add	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <prvHeapInit+0xb0>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80031ca:	4b1c      	ldr	r3, [pc, #112]	; (800323c <prvHeapInit+0xb0>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80031d8:	2208      	movs	r2, #8
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1a9b      	subs	r3, r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0307 	bic.w	r3, r3, #7
 80031e6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a15      	ldr	r2, [pc, #84]	; (8003240 <prvHeapInit+0xb4>)
 80031ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80031ee:	4b14      	ldr	r3, [pc, #80]	; (8003240 <prvHeapInit+0xb4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2200      	movs	r2, #0
 80031f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <prvHeapInit+0xb4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	1ad2      	subs	r2, r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <prvHeapInit+0xb4>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4a0a      	ldr	r2, [pc, #40]	; (8003244 <prvHeapInit+0xb8>)
 800321a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	4a09      	ldr	r2, [pc, #36]	; (8003248 <prvHeapInit+0xbc>)
 8003222:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <prvHeapInit+0xc0>)
 8003226:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800322a:	601a      	str	r2, [r3, #0]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	200001a8 	.word	0x200001a8
 800323c:	20012da8 	.word	0x20012da8
 8003240:	20012db0 	.word	0x20012db0
 8003244:	20012db8 	.word	0x20012db8
 8003248:	20012db4 	.word	0x20012db4
 800324c:	20012dc4 	.word	0x20012dc4

08003250 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003258:	4b28      	ldr	r3, [pc, #160]	; (80032fc <prvInsertBlockIntoFreeList+0xac>)
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e002      	b.n	8003264 <prvInsertBlockIntoFreeList+0x14>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	429a      	cmp	r2, r3
 800326c:	d8f7      	bhi.n	800325e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4413      	add	r3, r2
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	429a      	cmp	r2, r3
 800327e:	d108      	bne.n	8003292 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	441a      	add	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	441a      	add	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d118      	bne.n	80032d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <prvInsertBlockIntoFreeList+0xb0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d00d      	beq.n	80032ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	e008      	b.n	80032e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <prvInsertBlockIntoFreeList+0xb0>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	e003      	b.n	80032e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d002      	beq.n	80032ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	20012da8 	.word	0x20012da8
 8003300:	20012db0 	.word	0x20012db0

08003304 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003308:	4803      	ldr	r0, [pc, #12]	; (8003318 <_cbSendSystemDesc+0x14>)
 800330a:	f001 ff47 	bl	800519c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800330e:	4803      	ldr	r0, [pc, #12]	; (800331c <_cbSendSystemDesc+0x18>)
 8003310:	f001 ff44 	bl	800519c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	0800611c 	.word	0x0800611c
 800331c:	08006160 	.word	0x08006160

08003320 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <SEGGER_SYSVIEW_Conf+0x20>)
 8003326:	6818      	ldr	r0, [r3, #0]
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <SEGGER_SYSVIEW_Conf+0x20>)
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <SEGGER_SYSVIEW_Conf+0x24>)
 800332e:	4a06      	ldr	r2, [pc, #24]	; (8003348 <SEGGER_SYSVIEW_Conf+0x28>)
 8003330:	f001 fbb8 	bl	8004aa4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003334:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003338:	f001 fbf8 	bl	8004b2c <SEGGER_SYSVIEW_SetRAMBase>
}
 800333c:	bf00      	nop
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000000 	.word	0x20000000
 8003344:	08003305 	.word	0x08003305
 8003348:	08006200 	.word	0x08006200

0800334c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800334c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	e034      	b.n	80033c2 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003358:	491e      	ldr	r1, [pc, #120]	; (80033d4 <_cbSendTaskList+0x88>)
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	6818      	ldr	r0, [r3, #0]
 8003368:	491a      	ldr	r1, [pc, #104]	; (80033d4 <_cbSendTaskList+0x88>)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3304      	adds	r3, #4
 8003378:	681c      	ldr	r4, [r3, #0]
 800337a:	4916      	ldr	r1, [pc, #88]	; (80033d4 <_cbSendTaskList+0x88>)
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	3308      	adds	r3, #8
 800338a:	681d      	ldr	r5, [r3, #0]
 800338c:	4911      	ldr	r1, [pc, #68]	; (80033d4 <_cbSendTaskList+0x88>)
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	330c      	adds	r3, #12
 800339c:	681e      	ldr	r6, [r3, #0]
 800339e:	490d      	ldr	r1, [pc, #52]	; (80033d4 <_cbSendTaskList+0x88>)
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3310      	adds	r3, #16
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	4633      	mov	r3, r6
 80033b4:	462a      	mov	r2, r5
 80033b6:	4621      	mov	r1, r4
 80033b8:	f000 f8b4 	bl	8003524 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	3301      	adds	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
 80033c2:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <_cbSendTaskList+0x8c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3c5      	bcc.n	8003358 <_cbSendTaskList+0xc>
  }
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033d4:	20012dc8 	.word	0x20012dc8
 80033d8:	20012e68 	.word	0x20012e68

080033dc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80033dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80033e2:	f7ff f8ef 	bl	80025c4 <xTaskGetTickCountFromISR>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80033f0:	e9d7 5600 	ldrd	r5, r6, [r7]
 80033f4:	462b      	mov	r3, r5
 80033f6:	4634      	mov	r4, r6
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	0162      	lsls	r2, r4, #5
 8003402:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003406:	0159      	lsls	r1, r3, #5
 8003408:	460b      	mov	r3, r1
 800340a:	4614      	mov	r4, r2
 800340c:	1b5b      	subs	r3, r3, r5
 800340e:	eb64 0406 	sbc.w	r4, r4, r6
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	00a2      	lsls	r2, r4, #2
 800341c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003420:	0099      	lsls	r1, r3, #2
 8003422:	460b      	mov	r3, r1
 8003424:	4614      	mov	r4, r2
 8003426:	195b      	adds	r3, r3, r5
 8003428:	eb44 0406 	adc.w	r4, r4, r6
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	00e2      	lsls	r2, r4, #3
 8003436:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800343a:	00d9      	lsls	r1, r3, #3
 800343c:	460b      	mov	r3, r1
 800343e:	4614      	mov	r4, r2
 8003440:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8003444:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8003448:	4618      	mov	r0, r3
 800344a:	4621      	mov	r1, r4
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003454 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003462:	2205      	movs	r2, #5
 8003464:	492b      	ldr	r1, [pc, #172]	; (8003514 <SYSVIEW_AddTask+0xc0>)
 8003466:	68b8      	ldr	r0, [r7, #8]
 8003468:	f002 f9e6 	bl	8005838 <memcmp>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d04b      	beq.n	800350a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b07      	cmp	r3, #7
 8003478:	d903      	bls.n	8003482 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800347a:	4828      	ldr	r0, [pc, #160]	; (800351c <SYSVIEW_AddTask+0xc8>)
 800347c:	f002 f92e 	bl	80056dc <SEGGER_SYSVIEW_Warn>
    return;
 8003480:	e044      	b.n	800350c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4926      	ldr	r1, [pc, #152]	; (8003520 <SYSVIEW_AddTask+0xcc>)
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4921      	ldr	r1, [pc, #132]	; (8003520 <SYSVIEW_AddTask+0xcc>)
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3304      	adds	r3, #4
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	491b      	ldr	r1, [pc, #108]	; (8003520 <SYSVIEW_AddTask+0xcc>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3308      	adds	r3, #8
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80034c2:	4b15      	ldr	r3, [pc, #84]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4916      	ldr	r1, [pc, #88]	; (8003520 <SYSVIEW_AddTask+0xcc>)
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	330c      	adds	r3, #12
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4910      	ldr	r1, [pc, #64]	; (8003520 <SYSVIEW_AddTask+0xcc>)
 80034de:	4613      	mov	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3310      	adds	r3, #16
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	4a08      	ldr	r2, [pc, #32]	; (8003518 <SYSVIEW_AddTask+0xc4>)
 80034f6:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68b9      	ldr	r1, [r7, #8]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f80e 	bl	8003524 <SYSVIEW_SendTaskInfo>
 8003508:	e000      	b.n	800350c <SYSVIEW_AddTask+0xb8>
    return;
 800350a:	bf00      	nop

}
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	08006170 	.word	0x08006170
 8003518:	20012e68 	.word	0x20012e68
 800351c:	08006178 	.word	0x08006178
 8003520:	20012dc8 	.word	0x20012dc8

08003524 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b08a      	sub	sp, #40	; 0x28
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003532:	f107 0314 	add.w	r3, r7, #20
 8003536:	2214      	movs	r2, #20
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f002 f996 	bl	800586c <memset>
  TaskInfo.TaskID     = TaskID;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003554:	f107 0314 	add.w	r3, r7, #20
 8003558:	4618      	mov	r0, r3
 800355a:	f001 fd27 	bl	8004fac <SEGGER_SYSVIEW_SendTaskInfo>
}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <__NVIC_EnableIRQ>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	; (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	; (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80035fe:	f002 f8c9 	bl	8005794 <SEGGER_SYSVIEW_IsStarted>
 8003602:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800360a:	f001 fb53 	bl	8004cb4 <SEGGER_SYSVIEW_Start>
  }
}
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
	...

08003618 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <_cbOnUARTRx+0x3c>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d806      	bhi.n	8003638 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 800362a:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <_cbOnUARTRx+0x3c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <_cbOnUARTRx+0x3c>)
 8003634:	701a      	strb	r2, [r3, #0]
    goto Done;
 8003636:	e009      	b.n	800364c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8003638:	f7ff ffde 	bl	80035f8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <_cbOnUARTRx+0x3c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	1dfb      	adds	r3, r7, #7
 8003644:	2201      	movs	r2, #1
 8003646:	4619      	mov	r1, r3
 8003648:	f000 fb98 	bl	8003d7c <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 800364c:	bf00      	nop
}
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20000014 	.word	0x20000014

08003658 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8003660:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <_cbOnUARTTx+0x5c>)
 8003662:	785b      	ldrb	r3, [r3, #1]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d80f      	bhi.n	8003688 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <_cbOnUARTTx+0x5c>)
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	461a      	mov	r2, r3
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <_cbOnUARTTx+0x60>)
 8003670:	5c9a      	ldrb	r2, [r3, r2]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8003676:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <_cbOnUARTTx+0x5c>)
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	3301      	adds	r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <_cbOnUARTTx+0x5c>)
 8003680:	705a      	strb	r2, [r3, #1]
    r = 1;
 8003682:	2301      	movs	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
    goto Done;
 8003686:	e00f      	b.n	80036a8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <_cbOnUARTTx+0x5c>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fa19 	bl	8003ac8 <SEGGER_RTT_ReadUpBufferNoLock>
 8003696:	4603      	mov	r3, r0
 8003698:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	da02      	bge.n	80036a6 <_cbOnUARTTx+0x4e>
    r = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e000      	b.n	80036a8 <_cbOnUARTTx+0x50>
  }
Done:
 80036a6:	bf00      	nop
  return r;
 80036a8:	68fb      	ldr	r3, [r7, #12]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000014 	.word	0x20000014
 80036b8:	08006208 	.word	0x08006208

080036bc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80036c4:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <SEGGER_UART_init+0x1c>)
 80036c6:	4905      	ldr	r1, [pc, #20]	; (80036dc <SEGGER_UART_init+0x20>)
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f863 	bl	8003794 <HIF_UART_Init>
}
 80036ce:	bf00      	nop
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	08003619 	.word	0x08003619
 80036dc:	08003659 	.word	0x08003659

080036e0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <USART2_IRQHandler+0x80>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d011      	beq.n	800371a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <USART2_IRQHandler+0x84>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 030b 	and.w	r3, r3, #11
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8003708:	4b17      	ldr	r3, [pc, #92]	; (8003768 <USART2_IRQHandler+0x88>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d004      	beq.n	800371a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8003710:	4b15      	ldr	r3, [pc, #84]	; (8003768 <USART2_IRQHandler+0x88>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	4610      	mov	r0, r2
 8003718:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003720:	2b00      	cmp	r3, #0
 8003722:	d01a      	beq.n	800375a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8003724:	4b11      	ldr	r3, [pc, #68]	; (800376c <USART2_IRQHandler+0x8c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 800372c:	4b0f      	ldr	r3, [pc, #60]	; (800376c <USART2_IRQHandler+0x8c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	1dfa      	adds	r2, r7, #7
 8003732:	4610      	mov	r0, r2
 8003734:	4798      	blx	r3
 8003736:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <USART2_IRQHandler+0x90>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <USART2_IRQHandler+0x90>)
 8003744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e006      	b.n	800375a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <USART2_IRQHandler+0x80>)
 800374e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8003750:	79fa      	ldrb	r2, [r7, #7]
 8003752:	4b04      	ldr	r3, [pc, #16]	; (8003764 <USART2_IRQHandler+0x84>)
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e000      	b.n	800375a <USART2_IRQHandler+0x7a>
      return;
 8003758:	bf00      	nop
    }
  }
}
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40004400 	.word	0x40004400
 8003764:	40004404 	.word	0x40004404
 8003768:	20012e6c 	.word	0x20012e6c
 800376c:	20012e70 	.word	0x20012e70
 8003770:	4000440c 	.word	0x4000440c

08003774 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800377e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003782:	6013      	str	r3, [r2, #0]
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	4000440c 	.word	0x4000440c

08003794 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80037a0:	4b2e      	ldr	r3, [pc, #184]	; (800385c <HIF_UART_Init+0xc8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a2d      	ldr	r2, [pc, #180]	; (800385c <HIF_UART_Init+0xc8>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037aa:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80037ac:	4b2c      	ldr	r3, [pc, #176]	; (8003860 <HIF_UART_Init+0xcc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a2b      	ldr	r2, [pc, #172]	; (8003860 <HIF_UART_Init+0xcc>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80037b8:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HIF_UART_Init+0xd0>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80037cc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80037ce:	4a25      	ldr	r2, [pc, #148]	; (8003864 <HIF_UART_Init+0xd0>)
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80037d4:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HIF_UART_Init+0xd4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80037e8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80037ea:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <HIF_UART_Init+0xd4>)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80037f0:	4b1e      	ldr	r3, [pc, #120]	; (800386c <HIF_UART_Init+0xd8>)
 80037f2:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80037f6:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <HIF_UART_Init+0xdc>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HIF_UART_Init+0xe0>)
 8003800:	2280      	movs	r2, #128	; 0x80
 8003802:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800380a:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HIF_UART_Init+0xe4>)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003812:	3301      	adds	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d302      	bcc.n	800382a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8003824:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003828:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d004      	beq.n	800383a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	4a11      	ldr	r2, [pc, #68]	; (800387c <HIF_UART_Init+0xe8>)
 8003836:	b29b      	uxth	r3, r3
 8003838:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800383a:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HIF_UART_Init+0xec>)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8003840:	4a10      	ldr	r2, [pc, #64]	; (8003884 <HIF_UART_Init+0xf0>)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8003846:	2106      	movs	r1, #6
 8003848:	2026      	movs	r0, #38	; 0x26
 800384a:	f7ff feab 	bl	80035a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800384e:	2026      	movs	r0, #38	; 0x26
 8003850:	f7ff fe8a 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40023840 	.word	0x40023840
 8003860:	40023830 	.word	0x40023830
 8003864:	40020020 	.word	0x40020020
 8003868:	40020000 	.word	0x40020000
 800386c:	4000440c 	.word	0x4000440c
 8003870:	40004410 	.word	0x40004410
 8003874:	40004414 	.word	0x40004414
 8003878:	0501bd00 	.word	0x0501bd00
 800387c:	40004408 	.word	0x40004408
 8003880:	20012e6c 	.word	0x20012e6c
 8003884:	20012e70 	.word	0x20012e70

08003888 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <_DoInit+0x98>)
 8003890:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2203      	movs	r2, #3
 8003896:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a20      	ldr	r2, [pc, #128]	; (8003924 <_DoInit+0x9c>)
 80038a2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a20      	ldr	r2, [pc, #128]	; (8003928 <_DoInit+0xa0>)
 80038a8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038b0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <_DoInit+0x9c>)
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a17      	ldr	r2, [pc, #92]	; (800392c <_DoInit+0xa4>)
 80038ce:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2210      	movs	r2, #16
 80038d4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3307      	adds	r3, #7
 80038ec:	4a10      	ldr	r2, [pc, #64]	; (8003930 <_DoInit+0xa8>)
 80038ee:	6810      	ldr	r0, [r2, #0]
 80038f0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80038f2:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <_DoInit+0xac>)
 80038fa:	6810      	ldr	r0, [r2, #0]
 80038fc:	6018      	str	r0, [r3, #0]
 80038fe:	8891      	ldrh	r1, [r2, #4]
 8003900:	7992      	ldrb	r2, [r2, #6]
 8003902:	8099      	strh	r1, [r3, #4]
 8003904:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003906:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2220      	movs	r2, #32
 800390e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003910:	f3bf 8f5f 	dmb	sy
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	200143f0 	.word	0x200143f0
 8003924:	080061c8 	.word	0x080061c8
 8003928:	20012e74 	.word	0x20012e74
 800392c:	20013274 	.word	0x20013274
 8003930:	080061d4 	.word	0x080061d4
 8003934:	080061d8 	.word	0x080061d8

08003938 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003938:	b580      	push	{r7, lr}
 800393a:	b08a      	sub	sp, #40	; 0x28
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003944:	2300      	movs	r3, #0
 8003946:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	429a      	cmp	r2, r3
 800395a:	d905      	bls.n	8003968 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	e007      	b.n	8003978 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	69b9      	ldr	r1, [r7, #24]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	1acb      	subs	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3b01      	subs	r3, #1
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	4293      	cmp	r3, r2
 8003984:	bf28      	it	cs
 8003986:	4613      	movcs	r3, r2
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4293      	cmp	r3, r2
 8003990:	bf28      	it	cs
 8003992:	4613      	movcs	r3, r2
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80039a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a2:	68b9      	ldr	r1, [r7, #8]
 80039a4:	6978      	ldr	r0, [r7, #20]
 80039a6:	f001 ff56 	bl	8005856 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80039aa:	6a3a      	ldr	r2, [r7, #32]
 80039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ae:	4413      	add	r3, r2
 80039b0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	4413      	add	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	4413      	add	r3, r2
 80039c8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d101      	bne.n	80039d8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80039d8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1b2      	bne.n	800394e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80039e8:	6a3b      	ldr	r3, [r7, #32]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3728      	adds	r7, #40	; 0x28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b088      	sub	sp, #32
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	60b9      	str	r1, [r7, #8]
 80039fc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d911      	bls.n	8003a3a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	6938      	ldr	r0, [r7, #16]
 8003a26:	f001 ff16 	bl	8005856 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a2a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	441a      	add	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003a38:	e01f      	b.n	8003a7a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	68b9      	ldr	r1, [r7, #8]
 8003a4c:	6938      	ldr	r0, [r7, #16]
 8003a4e:	f001 ff02 	bl	8005856 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4413      	add	r3, r2
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6938      	ldr	r0, [r7, #16]
 8003a6c:	f001 fef3 	bl	8005856 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003a70:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	60da      	str	r2, [r3, #12]
}
 8003a7a:	bf00      	nop
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003a82:	b480      	push	{r7}
 8003a84:	b087      	sub	sp, #28
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d808      	bhi.n	8003ab0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	1ad2      	subs	r2, r2, r3
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
 8003aae:	e004      	b.n	8003aba <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003aba:	697b      	ldr	r3, [r7, #20]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b08c      	sub	sp, #48	; 0x30
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8003ad4:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003ad6:	623b      	str	r3, [r7, #32]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8003ae2:	f7ff fed1 	bl	8003888 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	4613      	mov	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	4413      	add	r3, r2
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4a37      	ldr	r2, [pc, #220]	; (8003bd0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8003af4:	4413      	add	r3, r2
 8003af6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003b0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d92b      	bls.n	8003b6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bf28      	it	cs
 8003b26:	4613      	movcs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b30:	4413      	add	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	6939      	ldr	r1, [r7, #16]
 8003b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b3a:	f001 fe8c 	bl	8005856 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4413      	add	r3, r2
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d101      	bne.n	8003b6c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	bf28      	it	cs
 8003b7c:	4613      	movcs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d019      	beq.n	8003bba <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	4413      	add	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	6939      	ldr	r1, [r7, #16]
 8003b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b96:	f001 fe5e 	bl	8005856 <memcpy>
    NumBytesRead += NumBytesRem;
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3730      	adds	r7, #48	; 0x30
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	200143f0 	.word	0x200143f0

08003bd4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	; 0x30
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003be0:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <SEGGER_RTT_ReadNoLock+0x108>)
 8003be2:	623b      	str	r3, [r7, #32]
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <SEGGER_RTT_ReadNoLock+0x1e>
 8003bee:	f7ff fe4b 	bl	8003888 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	005b      	lsls	r3, r3, #1
 8003bf8:	4413      	add	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	3360      	adds	r3, #96	; 0x60
 8003bfe:	4a37      	ldr	r2, [pc, #220]	; (8003cdc <SEGGER_RTT_ReadNoLock+0x108>)
 8003c00:	4413      	add	r3, r2
 8003c02:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003c14:	2300      	movs	r3, #0
 8003c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d92b      	bls.n	8003c78 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bf28      	it	cs
 8003c32:	4613      	movcs	r3, r2
 8003c34:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	4413      	add	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	6939      	ldr	r1, [r7, #16]
 8003c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c46:	f001 fe06 	bl	8005856 <memcpy>
    NumBytesRead += NumBytesRem;
 8003c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4413      	add	r3, r2
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	4413      	add	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	4413      	add	r3, r2
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d101      	bne.n	8003c78 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003c74:	2300      	movs	r3, #0
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4293      	cmp	r3, r2
 8003c86:	bf28      	it	cs
 8003c88:	4613      	movcs	r3, r2
 8003c8a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d019      	beq.n	8003cc6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	4413      	add	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	6939      	ldr	r1, [r7, #16]
 8003ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ca2:	f001 fdd8 	bl	8005856 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	4413      	add	r3, r2
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cd0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3730      	adds	r7, #48	; 0x30
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	200143f0 	.word	0x200143f0

08003ce0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	3360      	adds	r3, #96	; 0x60
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <SEGGER_RTT_WriteDownBufferNoLock+0x98>)
 8003cfe:	4413      	add	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d017      	beq.n	8003d3a <SEGGER_RTT_WriteDownBufferNoLock+0x5a>
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d302      	bcc.n	8003d14 <SEGGER_RTT_WriteDownBufferNoLock+0x34>
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d023      	beq.n	8003d5a <SEGGER_RTT_WriteDownBufferNoLock+0x7a>
 8003d12:	e029      	b.n	8003d68 <SEGGER_RTT_WriteDownBufferNoLock+0x88>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d14:	6978      	ldr	r0, [r7, #20]
 8003d16:	f7ff feb4 	bl	8003a82 <_GetAvailWriteSpace>
 8003d1a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d202      	bcs.n	8003d2a <SEGGER_RTT_WriteDownBufferNoLock+0x4a>
      Status = 0u;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003d28:	e021      	b.n	8003d6e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
      Status = NumBytes;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	69b9      	ldr	r1, [r7, #24]
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7ff fe5d 	bl	80039f2 <_WriteNoCheck>
    break;
 8003d38:	e019      	b.n	8003d6e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003d3a:	6978      	ldr	r0, [r7, #20]
 8003d3c:	f7ff fea1 	bl	8003a82 <_GetAvailWriteSpace>
 8003d40:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4293      	cmp	r3, r2
 8003d48:	bf28      	it	cs
 8003d4a:	4613      	movcs	r3, r2
 8003d4c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	69b9      	ldr	r1, [r7, #24]
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff fe4d 	bl	80039f2 <_WriteNoCheck>
    break;
 8003d58:	e009      	b.n	8003d6e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	69b9      	ldr	r1, [r7, #24]
 8003d5e:	6978      	ldr	r0, [r7, #20]
 8003d60:	f7ff fdea 	bl	8003938 <_WriteBlocking>
 8003d64:	61f8      	str	r0, [r7, #28]
    break;
 8003d66:	e002      	b.n	8003d6e <SEGGER_RTT_WriteDownBufferNoLock+0x8e>
  default:
    Status = 0u;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
    break;
 8003d6c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	200143f0 	.word	0x200143f0

08003d7c <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b088      	sub	sp, #32
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003d88:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <SEGGER_RTT_WriteDownBuffer+0x1e>
 8003d96:	f7ff fd77 	bl	8003888 <_DoInit>
  SEGGER_RTT_LOCK();
 8003d9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003d9e:	f04f 0120 	mov.w	r1, #32
 8003da2:	f381 8811 	msr	BASEPRI, r1
 8003da6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff ff97 	bl	8003ce0 <SEGGER_RTT_WriteDownBufferNoLock>
 8003db2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003dba:	697b      	ldr	r3, [r7, #20]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3720      	adds	r7, #32
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	200143f0 	.word	0x200143f0

08003dc8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003dd6:	4b3d      	ldr	r3, [pc, #244]	; (8003ecc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003de4:	f7ff fd50 	bl	8003888 <_DoInit>
  SEGGER_RTT_LOCK();
 8003de8:	f3ef 8311 	mrs	r3, BASEPRI
 8003dec:	f04f 0120 	mov.w	r1, #32
 8003df0:	f381 8811 	msr	BASEPRI, r1
 8003df4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003df6:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003df8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003dfe:	6939      	ldr	r1, [r7, #16]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	4613      	mov	r3, r2
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3304      	adds	r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	dbeb      	blt.n	8003dfe <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e26:	e000      	b.n	8003e2a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e28:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	69fa      	ldr	r2, [r7, #28]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	da3f      	bge.n	8003eb4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e34:	6939      	ldr	r1, [r7, #16]
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	440b      	add	r3, r1
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e48:	6939      	ldr	r1, [r7, #16]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	4613      	mov	r3, r2
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	4413      	add	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	440b      	add	r3, r1
 8003e58:	3304      	adds	r3, #4
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003e5e:	6939      	ldr	r1, [r7, #16]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	440b      	add	r3, r1
 8003e6c:	3320      	adds	r3, #32
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003e72:	6939      	ldr	r1, [r7, #16]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	440b      	add	r3, r1
 8003e80:	3328      	adds	r3, #40	; 0x28
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003e86:	6939      	ldr	r1, [r7, #16]
 8003e88:	69fa      	ldr	r2, [r7, #28]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	4413      	add	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	440b      	add	r3, r1
 8003e94:	3324      	adds	r3, #36	; 0x24
 8003e96:	2200      	movs	r2, #0
 8003e98:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003e9a:	6939      	ldr	r1, [r7, #16]
 8003e9c:	69fa      	ldr	r2, [r7, #28]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	440b      	add	r3, r1
 8003ea8:	332c      	adds	r3, #44	; 0x2c
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003eae:	f3bf 8f5f 	dmb	sy
 8003eb2:	e002      	b.n	8003eba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003eb8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003ec0:	69fb      	ldr	r3, [r7, #28]
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200143f0 	.word	0x200143f0

08003ed0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b088      	sub	sp, #32
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ede:	4b33      	ldr	r3, [pc, #204]	; (8003fac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003eec:	f7ff fccc 	bl	8003888 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ef0:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003ef2:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d24d      	bcs.n	8003f9c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003f00:	f3ef 8311 	mrs	r3, BASEPRI
 8003f04:	f04f 0120 	mov.w	r1, #32
 8003f08:	f381 8811 	msr	BASEPRI, r1
 8003f0c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d031      	beq.n	8003f78 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003f14:	6979      	ldr	r1, [r7, #20]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	005b      	lsls	r3, r3, #1
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	3360      	adds	r3, #96	; 0x60
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f28:	6979      	ldr	r1, [r7, #20]
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	440b      	add	r3, r1
 8003f36:	3364      	adds	r3, #100	; 0x64
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003f3c:	6979      	ldr	r1, [r7, #20]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4613      	mov	r3, r2
 8003f42:	005b      	lsls	r3, r3, #1
 8003f44:	4413      	add	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	440b      	add	r3, r1
 8003f4a:	3368      	adds	r3, #104	; 0x68
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003f50:	6979      	ldr	r1, [r7, #20]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3370      	adds	r3, #112	; 0x70
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003f64:	6979      	ldr	r1, [r7, #20]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	440b      	add	r3, r1
 8003f72:	336c      	adds	r3, #108	; 0x6c
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003f78:	6979      	ldr	r1, [r7, #20]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	440b      	add	r3, r1
 8003f86:	3374      	adds	r3, #116	; 0x74
 8003f88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f8a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f8c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	e002      	b.n	8003fa2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3720      	adds	r7, #32
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200143f0 	.word	0x200143f0

08003fb0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003fc0:	e002      	b.n	8003fc8 <_EncodeStr+0x18>
    Len++;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f6      	bne.n	8003fc2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d901      	bls.n	8003fe0 <_EncodeStr+0x30>
    Len = Limit;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2bfe      	cmp	r3, #254	; 0xfe
 8003fe4:	d806      	bhi.n	8003ff4 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1c5a      	adds	r2, r3, #1
 8003fea:	60fa      	str	r2, [r7, #12]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	b2d2      	uxtb	r2, r2
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	e011      	b.n	8004018 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	60fa      	str	r2, [r7, #12]
 8003ffa:	22ff      	movs	r2, #255	; 0xff
 8003ffc:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	60fa      	str	r2, [r7, #12]
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	0a19      	lsrs	r1, r3, #8
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	60fa      	str	r2, [r7, #12]
 8004014:	b2ca      	uxtb	r2, r1
 8004016:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800401c:	e00a      	b.n	8004034 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	1c53      	adds	r3, r2, #1
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1c59      	adds	r1, r3, #1
 8004028:	60f9      	str	r1, [r7, #12]
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	701a      	strb	r2, [r3, #0]
    n++;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	3301      	adds	r3, #1
 8004032:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	429a      	cmp	r2, r3
 800403a:	d3f0      	bcc.n	800401e <_EncodeStr+0x6e>
  }
  return pPayload;
 800403c:	68fb      	ldr	r3, [r7, #12]
}
 800403e:	4618      	mov	r0, r3
 8004040:	371c      	adds	r7, #28
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr

0800404a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3304      	adds	r3, #4
}
 8004056:	4618      	mov	r0, r3
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800406a:	4b33      	ldr	r3, [pc, #204]	; (8004138 <_HandleIncomingPacket+0xd4>)
 800406c:	7e1b      	ldrb	r3, [r3, #24]
 800406e:	4618      	mov	r0, r3
 8004070:	1cfb      	adds	r3, r7, #3
 8004072:	2201      	movs	r2, #1
 8004074:	4619      	mov	r1, r3
 8004076:	f7ff fdad 	bl	8003bd4 <SEGGER_RTT_ReadNoLock>
 800407a:	4603      	mov	r3, r0
 800407c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b00      	cmp	r3, #0
 8004082:	dd4d      	ble.n	8004120 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d022      	beq.n	80040d0 <_HandleIncomingPacket+0x6c>
 800408a:	2b05      	cmp	r3, #5
 800408c:	dc0b      	bgt.n	80040a6 <_HandleIncomingPacket+0x42>
 800408e:	2b02      	cmp	r3, #2
 8004090:	d015      	beq.n	80040be <_HandleIncomingPacket+0x5a>
 8004092:	2b02      	cmp	r3, #2
 8004094:	dc02      	bgt.n	800409c <_HandleIncomingPacket+0x38>
 8004096:	2b01      	cmp	r3, #1
 8004098:	d00e      	beq.n	80040b8 <_HandleIncomingPacket+0x54>
 800409a:	e034      	b.n	8004106 <_HandleIncomingPacket+0xa2>
 800409c:	2b03      	cmp	r3, #3
 800409e:	d011      	beq.n	80040c4 <_HandleIncomingPacket+0x60>
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	d012      	beq.n	80040ca <_HandleIncomingPacket+0x66>
 80040a4:	e02f      	b.n	8004106 <_HandleIncomingPacket+0xa2>
 80040a6:	2b07      	cmp	r3, #7
 80040a8:	d018      	beq.n	80040dc <_HandleIncomingPacket+0x78>
 80040aa:	2b07      	cmp	r3, #7
 80040ac:	db13      	blt.n	80040d6 <_HandleIncomingPacket+0x72>
 80040ae:	2b7f      	cmp	r3, #127	; 0x7f
 80040b0:	d038      	beq.n	8004124 <_HandleIncomingPacket+0xc0>
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d015      	beq.n	80040e2 <_HandleIncomingPacket+0x7e>
 80040b6:	e026      	b.n	8004106 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80040b8:	f000 fdfc 	bl	8004cb4 <SEGGER_SYSVIEW_Start>
      break;
 80040bc:	e037      	b.n	800412e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80040be:	f000 feb5 	bl	8004e2c <SEGGER_SYSVIEW_Stop>
      break;
 80040c2:	e034      	b.n	800412e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80040c4:	f001 f88e 	bl	80051e4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80040c8:	e031      	b.n	800412e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80040ca:	f001 f853 	bl	8005174 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80040ce:	e02e      	b.n	800412e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80040d0:	f000 fed2 	bl	8004e78 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80040d4:	e02b      	b.n	800412e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80040d6:	f001 faaf 	bl	8005638 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80040da:	e028      	b.n	800412e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80040dc:	f001 fa8e 	bl	80055fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80040e0:	e025      	b.n	800412e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040e2:	4b15      	ldr	r3, [pc, #84]	; (8004138 <_HandleIncomingPacket+0xd4>)
 80040e4:	7e1b      	ldrb	r3, [r3, #24]
 80040e6:	4618      	mov	r0, r3
 80040e8:	1cfb      	adds	r3, r7, #3
 80040ea:	2201      	movs	r2, #1
 80040ec:	4619      	mov	r1, r3
 80040ee:	f7ff fd71 	bl	8003bd4 <SEGGER_RTT_ReadNoLock>
 80040f2:	4603      	mov	r3, r0
 80040f4:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dd15      	ble.n	8004128 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	4618      	mov	r0, r3
 8004100:	f001 f9fc 	bl	80054fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004104:	e010      	b.n	8004128 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004106:	78fb      	ldrb	r3, [r7, #3]
 8004108:	b25b      	sxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	da0e      	bge.n	800412c <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800410e:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <_HandleIncomingPacket+0xd4>)
 8004110:	7e1b      	ldrb	r3, [r3, #24]
 8004112:	4618      	mov	r0, r3
 8004114:	1cfb      	adds	r3, r7, #3
 8004116:	2201      	movs	r2, #1
 8004118:	4619      	mov	r1, r3
 800411a:	f7ff fd5b 	bl	8003bd4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800411e:	e005      	b.n	800412c <_HandleIncomingPacket+0xc8>
    }
  }
 8004120:	bf00      	nop
 8004122:	e004      	b.n	800412e <_HandleIncomingPacket+0xca>
      break;
 8004124:	bf00      	nop
 8004126:	e002      	b.n	800412e <_HandleIncomingPacket+0xca>
      break;
 8004128:	bf00      	nop
 800412a:	e000      	b.n	800412e <_HandleIncomingPacket+0xca>
      break;
 800412c:	bf00      	nop
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2001428c 	.word	0x2001428c

0800413c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800413c:	b580      	push	{r7, lr}
 800413e:	b08c      	sub	sp, #48	; 0x30
 8004140:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004142:	2301      	movs	r3, #1
 8004144:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004150:	4b32      	ldr	r3, [pc, #200]	; (800421c <_TrySendOverflowPacket+0xe0>)
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	e00b      	b.n	8004170 <_TrySendOverflowPacket+0x34>
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	b2da      	uxtb	r2, r3
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	1c59      	adds	r1, r3, #1
 8004160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	09db      	lsrs	r3, r3, #7
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	2b7f      	cmp	r3, #127	; 0x7f
 8004174:	d8f0      	bhi.n	8004158 <_TrySendOverflowPacket+0x1c>
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800417c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <_TrySendOverflowPacket+0xe4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800418c:	4b23      	ldr	r3, [pc, #140]	; (800421c <_TrySendOverflowPacket+0xe0>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	e00b      	b.n	80041b8 <_TrySendOverflowPacket+0x7c>
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	b2da      	uxtb	r2, r3
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a6:	1c59      	adds	r1, r3, #1
 80041a8:	6279      	str	r1, [r7, #36]	; 0x24
 80041aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	09db      	lsrs	r3, r3, #7
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	2b7f      	cmp	r3, #127	; 0x7f
 80041bc:	d8f0      	bhi.n	80041a0 <_TrySendOverflowPacket+0x64>
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	627a      	str	r2, [r7, #36]	; 0x24
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	b2d2      	uxtb	r2, r2
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <_TrySendOverflowPacket+0xe0>)
 80041d0:	785b      	ldrb	r3, [r3, #1]
 80041d2:	4618      	mov	r0, r3
 80041d4:	69fa      	ldr	r2, [r7, #28]
 80041d6:	1d3b      	adds	r3, r7, #4
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	1d3b      	adds	r3, r7, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	f7fb fff6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041e4:	4603      	mov	r3, r0
 80041e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80041e8:	f7ff fac4 	bl	8003774 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <_TrySendOverflowPacket+0xe0>)
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80041f8:	4b08      	ldr	r3, [pc, #32]	; (800421c <_TrySendOverflowPacket+0xe0>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	4b06      	ldr	r3, [pc, #24]	; (800421c <_TrySendOverflowPacket+0xe0>)
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	e004      	b.n	8004210 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <_TrySendOverflowPacket+0xe0>)
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	3301      	adds	r3, #1
 800420c:	4a03      	ldr	r2, [pc, #12]	; (800421c <_TrySendOverflowPacket+0xe0>)
 800420e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004210:	693b      	ldr	r3, [r7, #16]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3730      	adds	r7, #48	; 0x30
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	2001428c 	.word	0x2001428c
 8004220:	e0001004 	.word	0xe0001004

08004224 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b08a      	sub	sp, #40	; 0x28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004230:	4b6d      	ldr	r3, [pc, #436]	; (80043e8 <_SendPacket+0x1c4>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d010      	beq.n	800425a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <_SendPacket+0x1c4>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80a5 	beq.w	800438c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004242:	4b69      	ldr	r3, [pc, #420]	; (80043e8 <_SendPacket+0x1c4>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d109      	bne.n	800425e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800424a:	f7ff ff77 	bl	800413c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800424e:	4b66      	ldr	r3, [pc, #408]	; (80043e8 <_SendPacket+0x1c4>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 809c 	bne.w	8004390 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8004258:	e001      	b.n	800425e <_SendPacket+0x3a>
    goto Send;
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <_SendPacket+0x3c>
Send:
 800425e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b1f      	cmp	r3, #31
 8004264:	d809      	bhi.n	800427a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004266:	4b60      	ldr	r3, [pc, #384]	; (80043e8 <_SendPacket+0x1c4>)
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 808d 	bne.w	8004394 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b17      	cmp	r3, #23
 800427e:	d807      	bhi.n	8004290 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	701a      	strb	r2, [r3, #0]
 800428e:	e03d      	b.n	800430c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	2b7f      	cmp	r3, #127	; 0x7f
 800429c:	d912      	bls.n	80042c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	09da      	lsrs	r2, r3, #7
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	3a01      	subs	r2, #1
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e006      	b.n	80042d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b7f      	cmp	r3, #127	; 0x7f
 80042d6:	d912      	bls.n	80042fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	09da      	lsrs	r2, r3, #7
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3b01      	subs	r3, #1
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	3a01      	subs	r2, #1
 80042f0:	60fa      	str	r2, [r7, #12]
 80042f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e006      	b.n	800430c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3b01      	subs	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	b2da      	uxtb	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800430c:	4b37      	ldr	r3, [pc, #220]	; (80043ec <_SendPacket+0x1c8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004312:	4b35      	ldr	r3, [pc, #212]	; (80043e8 <_SendPacket+0x1c4>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	e00b      	b.n	800433e <_SendPacket+0x11a>
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	b2da      	uxtb	r2, r3
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	1c59      	adds	r1, r3, #1
 800432e:	6279      	str	r1, [r7, #36]	; 0x24
 8004330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004334:	b2d2      	uxtb	r2, r2
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	09db      	lsrs	r3, r3, #7
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	2b7f      	cmp	r3, #127	; 0x7f
 8004342:	d8f0      	bhi.n	8004326 <_SendPacket+0x102>
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	627a      	str	r2, [r7, #36]	; 0x24
 800434a:	6a3a      	ldr	r2, [r7, #32]
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004352:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004354:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <_SendPacket+0x1c4>)
 8004356:	785b      	ldrb	r3, [r3, #1]
 8004358:	4618      	mov	r0, r3
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	461a      	mov	r2, r3
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	f7fb ff34 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004368:	4603      	mov	r3, r0
 800436a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 800436c:	f7ff fa02 	bl	8003774 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004376:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <_SendPacket+0x1c4>)
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	60d3      	str	r3, [r2, #12]
 800437c:	e00b      	b.n	8004396 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800437e:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <_SendPacket+0x1c4>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	3301      	adds	r3, #1
 8004384:	b2da      	uxtb	r2, r3
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <_SendPacket+0x1c4>)
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e004      	b.n	8004396 <_SendPacket+0x172>
    goto SendDone;
 800438c:	bf00      	nop
 800438e:	e002      	b.n	8004396 <_SendPacket+0x172>
      goto SendDone;
 8004390:	bf00      	nop
 8004392:	e000      	b.n	8004396 <_SendPacket+0x172>
      goto SendDone;
 8004394:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004396:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <_SendPacket+0x1c4>)
 8004398:	7e1b      	ldrb	r3, [r3, #24]
 800439a:	4619      	mov	r1, r3
 800439c:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <_SendPacket+0x1cc>)
 800439e:	460b      	mov	r3, r1
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	440b      	add	r3, r1
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4413      	add	r3, r2
 80043a8:	336c      	adds	r3, #108	; 0x6c
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <_SendPacket+0x1c4>)
 80043ae:	7e1b      	ldrb	r3, [r3, #24]
 80043b0:	4618      	mov	r0, r3
 80043b2:	490f      	ldr	r1, [pc, #60]	; (80043f0 <_SendPacket+0x1cc>)
 80043b4:	4603      	mov	r3, r0
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4403      	add	r3, r0
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	440b      	add	r3, r1
 80043be:	3370      	adds	r3, #112	; 0x70
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d00b      	beq.n	80043de <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <_SendPacket+0x1c4>)
 80043c8:	789b      	ldrb	r3, [r3, #2]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <_SendPacket+0x1c4>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80043d4:	f7ff fe46 	bl	8004064 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80043d8:	4b03      	ldr	r3, [pc, #12]	; (80043e8 <_SendPacket+0x1c4>)
 80043da:	2200      	movs	r2, #0
 80043dc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80043de:	bf00      	nop
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	2001428c 	.word	0x2001428c
 80043ec:	e0001004 	.word	0xe0001004
 80043f0:	200143f0 	.word	0x200143f0

080043f4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	460b      	mov	r3, r1
 80043fe:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3301      	adds	r3, #1
 800440a:	2b80      	cmp	r3, #128	; 0x80
 800440c:	d80a      	bhi.n	8004424 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	1c59      	adds	r1, r3, #1
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6051      	str	r1, [r2, #4]
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	2b80      	cmp	r3, #128	; 0x80
 800442a:	d15a      	bne.n	80044e2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	e00b      	b.n	8004466 <_StoreChar+0x72>
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	b2da      	uxtb	r2, r3
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	1c59      	adds	r1, r3, #1
 8004456:	6279      	str	r1, [r7, #36]	; 0x24
 8004458:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	701a      	strb	r2, [r3, #0]
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	09db      	lsrs	r3, r3, #7
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2b7f      	cmp	r3, #127	; 0x7f
 800446a:	d8f0      	bhi.n	800444e <_StoreChar+0x5a>
 800446c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	627a      	str	r2, [r7, #36]	; 0x24
 8004472:	6a3a      	ldr	r2, [r7, #32]
 8004474:	b2d2      	uxtb	r2, r2
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	e00b      	b.n	800449e <_StoreChar+0xaa>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	1c59      	adds	r1, r3, #1
 800448e:	61f9      	str	r1, [r7, #28]
 8004490:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	09db      	lsrs	r3, r3, #7
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	2b7f      	cmp	r3, #127	; 0x7f
 80044a2:	d8f0      	bhi.n	8004486 <_StoreChar+0x92>
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	61fa      	str	r2, [r7, #28]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	701a      	strb	r2, [r3, #0]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	221a      	movs	r2, #26
 80044ba:	6939      	ldr	r1, [r7, #16]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff feb1 	bl	8004224 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fdbf 	bl	800404a <_PreparePacket>
 80044cc:	4602      	mov	r2, r0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	611a      	str	r2, [r3, #16]
  }
}
 80044e2:	bf00      	nop
 80044e4:	3728      	adds	r7, #40	; 0x28
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80044fe:	2301      	movs	r3, #1
 8004500:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004502:	2301      	movs	r3, #1
 8004504:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004506:	e007      	b.n	8004518 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	623b      	str	r3, [r7, #32]
    Width++;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	3301      	adds	r3, #1
 8004516:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004518:	6a3a      	ldr	r2, [r7, #32]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	429a      	cmp	r2, r3
 800451e:	d2f3      	bcs.n	8004508 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	429a      	cmp	r2, r3
 8004526:	d901      	bls.n	800452c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800452c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d11f      	bne.n	8004576 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2b00      	cmp	r3, #0
 800453a:	d01c      	beq.n	8004576 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <_PrintUnsigned+0x66>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <_PrintUnsigned+0x66>
        c = '0';
 800454c:	2330      	movs	r3, #48	; 0x30
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	e001      	b.n	8004556 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8004552:	2320      	movs	r3, #32
 8004554:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004556:	e007      	b.n	8004568 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	3b01      	subs	r3, #1
 800455c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800455e:	7efb      	ldrb	r3, [r7, #27]
 8004560:	4619      	mov	r1, r3
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f7ff ff46 	bl	80043f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <_PrintUnsigned+0x8a>
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004572:	429a      	cmp	r2, r3
 8004574:	d3f0      	bcc.n	8004558 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d903      	bls.n	8004584 <_PrintUnsigned+0x98>
      NumDigits--;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	3b01      	subs	r3, #1
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	e009      	b.n	8004598 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d200      	bcs.n	8004598 <_PrintUnsigned+0xac>
        break;
 8004596:	e005      	b.n	80045a4 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	fb02 f303 	mul.w	r3, r2, r3
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80045a2:	e7e8      	b.n	8004576 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80045bc:	4a15      	ldr	r2, [pc, #84]	; (8004614 <_PrintUnsigned+0x128>)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	4619      	mov	r1, r3
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f7ff ff14 	bl	80043f4 <_StoreChar>
    Digit /= Base;
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e3      	bne.n	80045a4 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80045dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d011      	beq.n	800460a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00e      	beq.n	800460a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045ec:	e006      	b.n	80045fc <_PrintUnsigned+0x110>
        FieldWidth--;
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	3b01      	subs	r3, #1
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80045f4:	2120      	movs	r1, #32
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fefc 	bl	80043f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80045fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d003      	beq.n	800460a <_PrintUnsigned+0x11e>
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	429a      	cmp	r2, r3
 8004608:	d3f1      	bcc.n	80045ee <_PrintUnsigned+0x102>
      }
    }
  }
}
 800460a:	bf00      	nop
 800460c:	3728      	adds	r7, #40	; 0x28
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	08006218 	.word	0x08006218

08004618 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af02      	add	r7, sp, #8
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	bfb8      	it	lt
 800462c:	425b      	neglt	r3, r3
 800462e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004630:	2301      	movs	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004634:	e007      	b.n	8004646 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	fb92 f3f3 	sdiv	r3, r2, r3
 800463e:	613b      	str	r3, [r7, #16]
    Width++;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	3301      	adds	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	429a      	cmp	r2, r3
 800464c:	daf3      	bge.n	8004636 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	429a      	cmp	r2, r3
 8004654:	d901      	bls.n	800465a <_PrintInt+0x42>
    Width = NumDigits;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800465a:	6a3b      	ldr	r3, [r7, #32]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <_PrintInt+0x5e>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	db04      	blt.n	8004670 <_PrintInt+0x58>
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <_PrintInt+0x5e>
    FieldWidth--;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	3b01      	subs	r3, #1
 8004674:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <_PrintInt+0x6e>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <_PrintInt+0x9c>
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d111      	bne.n	80046b4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00e      	beq.n	80046b4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004696:	e006      	b.n	80046a6 <_PrintInt+0x8e>
        FieldWidth--;
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	3b01      	subs	r3, #1
 800469c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800469e:	2120      	movs	r1, #32
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7ff fea7 	bl	80043f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <_PrintInt+0x9c>
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3f1      	bcc.n	8004698 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da07      	bge.n	80046ca <_PrintInt+0xb2>
    v = -v;
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	425b      	negs	r3, r3
 80046be:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80046c0:	212d      	movs	r1, #45	; 0x2d
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff fe96 	bl	80043f4 <_StoreChar>
 80046c8:	e008      	b.n	80046dc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80046d4:	212b      	movs	r1, #43	; 0x2b
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff fe8c 	bl	80043f4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d019      	beq.n	800471a <_PrintInt+0x102>
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d114      	bne.n	800471a <_PrintInt+0x102>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d111      	bne.n	800471a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046fc:	e006      	b.n	800470c <_PrintInt+0xf4>
        FieldWidth--;
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	3b01      	subs	r3, #1
 8004702:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004704:	2130      	movs	r1, #48	; 0x30
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fe74 	bl	80043f4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <_PrintInt+0x102>
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	429a      	cmp	r2, r3
 8004718:	d3f1      	bcc.n	80046fe <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	9301      	str	r3, [sp, #4]
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f7ff fedf 	bl	80044ec <_PrintUnsigned>
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b098      	sub	sp, #96	; 0x60
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004744:	f3ef 8311 	mrs	r3, BASEPRI
 8004748:	f04f 0120 	mov.w	r1, #32
 800474c:	f381 8811 	msr	BASEPRI, r1
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	48ac      	ldr	r0, [pc, #688]	; (8004a04 <_VPrintTarget+0x2cc>)
 8004754:	f7ff fc79 	bl	800404a <_PreparePacket>
 8004758:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800475a:	4baa      	ldr	r3, [pc, #680]	; (8004a04 <_VPrintTarget+0x2cc>)
 800475c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800475e:	2300      	movs	r3, #0
 8004760:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3301      	adds	r3, #1
 800476a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	3301      	adds	r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800477e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8140 	beq.w	8004a08 <_VPrintTarget+0x2d0>
      break;
    }
    if (c == '%') {
 8004788:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800478c:	2b25      	cmp	r3, #37	; 0x25
 800478e:	f040 812a 	bne.w	80049e6 <_VPrintTarget+0x2ae>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004792:	2300      	movs	r3, #0
 8004794:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80047a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047a6:	3b23      	subs	r3, #35	; 0x23
 80047a8:	2b0d      	cmp	r3, #13
 80047aa:	d83f      	bhi.n	800482c <_VPrintTarget+0xf4>
 80047ac:	a201      	add	r2, pc, #4	; (adr r2, 80047b4 <_VPrintTarget+0x7c>)
 80047ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b2:	bf00      	nop
 80047b4:	0800481d 	.word	0x0800481d
 80047b8:	0800482d 	.word	0x0800482d
 80047bc:	0800482d 	.word	0x0800482d
 80047c0:	0800482d 	.word	0x0800482d
 80047c4:	0800482d 	.word	0x0800482d
 80047c8:	0800482d 	.word	0x0800482d
 80047cc:	0800482d 	.word	0x0800482d
 80047d0:	0800482d 	.word	0x0800482d
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	080047ed 	.word	0x080047ed
 80047e0:	0800482d 	.word	0x0800482d
 80047e4:	0800482d 	.word	0x0800482d
 80047e8:	080047fd 	.word	0x080047fd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80047ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	3301      	adds	r3, #1
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e01a      	b.n	8004832 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80047fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fe:	f043 0302 	orr.w	r3, r3, #2
 8004802:	64bb      	str	r3, [r7, #72]	; 0x48
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e012      	b.n	8004832 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800480c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480e:	f043 0304 	orr.w	r3, r3, #4
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e00a      	b.n	8004832 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800481c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481e:	f043 0308 	orr.w	r3, r3, #8
 8004822:	64bb      	str	r3, [r7, #72]	; 0x48
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e002      	b.n	8004832 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800482c:	2300      	movs	r3, #0
 800482e:	653b      	str	r3, [r7, #80]	; 0x50
 8004830:	bf00      	nop
        }
      } while (v);
 8004832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1b0      	bne.n	800479a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004838:	2300      	movs	r3, #0
 800483a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8004844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004848:	2b2f      	cmp	r3, #47	; 0x2f
 800484a:	d912      	bls.n	8004872 <_VPrintTarget+0x13a>
 800484c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004850:	2b39      	cmp	r3, #57	; 0x39
 8004852:	d80e      	bhi.n	8004872 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3301      	adds	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800485a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485c:	4613      	mov	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	461a      	mov	r2, r3
 8004866:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800486a:	4413      	add	r3, r2
 800486c:	3b30      	subs	r3, #48	; 0x30
 800486e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8004870:	e7e4      	b.n	800483c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004872:	2300      	movs	r3, #0
 8004874:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800487e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004882:	2b2e      	cmp	r3, #46	; 0x2e
 8004884:	d11d      	bne.n	80048c2 <_VPrintTarget+0x18a>
        sFormat++;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3301      	adds	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004898:	2b2f      	cmp	r3, #47	; 0x2f
 800489a:	d912      	bls.n	80048c2 <_VPrintTarget+0x18a>
 800489c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048a0:	2b39      	cmp	r3, #57	; 0x39
 80048a2:	d80e      	bhi.n	80048c2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80048aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	461a      	mov	r2, r3
 80048b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ba:	4413      	add	r3, r2
 80048bc:	3b30      	subs	r3, #48	; 0x30
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80048c0:	e7e4      	b.n	800488c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80048ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ce:	2b6c      	cmp	r3, #108	; 0x6c
 80048d0:	d003      	beq.n	80048da <_VPrintTarget+0x1a2>
 80048d2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048d6:	2b68      	cmp	r3, #104	; 0x68
 80048d8:	d107      	bne.n	80048ea <_VPrintTarget+0x1b2>
          c = *sFormat;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3301      	adds	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80048e8:	e7ef      	b.n	80048ca <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80048ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d022      	beq.n	8004938 <_VPrintTarget+0x200>
 80048f2:	2b64      	cmp	r3, #100	; 0x64
 80048f4:	dc06      	bgt.n	8004904 <_VPrintTarget+0x1cc>
 80048f6:	2b58      	cmp	r3, #88	; 0x58
 80048f8:	d044      	beq.n	8004984 <_VPrintTarget+0x24c>
 80048fa:	2b63      	cmp	r3, #99	; 0x63
 80048fc:	d009      	beq.n	8004912 <_VPrintTarget+0x1da>
 80048fe:	2b25      	cmp	r3, #37	; 0x25
 8004900:	d066      	beq.n	80049d0 <_VPrintTarget+0x298>
        break;
      case '%':
        _StoreChar(&BufferDesc, '%');
        break;
      default:
        break;
 8004902:	e06c      	b.n	80049de <_VPrintTarget+0x2a6>
      switch (c) {
 8004904:	2b75      	cmp	r3, #117	; 0x75
 8004906:	d02a      	beq.n	800495e <_VPrintTarget+0x226>
 8004908:	2b78      	cmp	r3, #120	; 0x78
 800490a:	d03b      	beq.n	8004984 <_VPrintTarget+0x24c>
 800490c:	2b70      	cmp	r3, #112	; 0x70
 800490e:	d04c      	beq.n	80049aa <_VPrintTarget+0x272>
        break;
 8004910:	e065      	b.n	80049de <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	1d19      	adds	r1, r3, #4
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6011      	str	r1, [r2, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8004926:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800492a:	f107 0314 	add.w	r3, r7, #20
 800492e:	4611      	mov	r1, r2
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fd5f 	bl	80043f4 <_StoreChar>
        break;
 8004936:	e052      	b.n	80049de <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1d19      	adds	r1, r3, #4
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6011      	str	r1, [r2, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004946:	f107 0014 	add.w	r0, r7, #20
 800494a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004954:	220a      	movs	r2, #10
 8004956:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004958:	f7ff fe5e 	bl	8004618 <_PrintInt>
        break;
 800495c:	e03f      	b.n	80049de <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	1d19      	adds	r1, r3, #4
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6011      	str	r1, [r2, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800496c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800496e:	f107 0014 	add.w	r0, r7, #20
 8004972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497c:	220a      	movs	r2, #10
 800497e:	f7ff fdb5 	bl	80044ec <_PrintUnsigned>
        break;
 8004982:	e02c      	b.n	80049de <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	1d19      	adds	r1, r3, #4
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6011      	str	r1, [r2, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004992:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004994:	f107 0014 	add.w	r0, r7, #20
 8004998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a2:	2210      	movs	r2, #16
 80049a4:	f7ff fda2 	bl	80044ec <_PrintUnsigned>
        break;
 80049a8:	e019      	b.n	80049de <_VPrintTarget+0x2a6>
        v = va_arg(*pParamList, int);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	1d19      	adds	r1, r3, #4
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6011      	str	r1, [r2, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80049b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049ba:	f107 0014 	add.w	r0, r7, #20
 80049be:	2300      	movs	r3, #0
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	2308      	movs	r3, #8
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	2308      	movs	r3, #8
 80049c8:	2210      	movs	r2, #16
 80049ca:	f7ff fd8f 	bl	80044ec <_PrintUnsigned>
        break;
 80049ce:	e006      	b.n	80049de <_VPrintTarget+0x2a6>
        _StoreChar(&BufferDesc, '%');
 80049d0:	f107 0314 	add.w	r3, r7, #20
 80049d4:	2125      	movs	r1, #37	; 0x25
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fd0c 	bl	80043f4 <_StoreChar>
        break;
 80049dc:	bf00      	nop
      }
      sFormat++;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	3301      	adds	r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e007      	b.n	80049f6 <_VPrintTarget+0x2be>
    } else {
      _StoreChar(&BufferDesc, c);
 80049e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80049ea:	f107 0314 	add.w	r3, r7, #20
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fcff 	bl	80043f4 <_StoreChar>
    }
  } while (*sFormat);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f47f aeb8 	bne.w	8004770 <_VPrintTarget+0x38>
 8004a00:	e003      	b.n	8004a0a <_VPrintTarget+0x2d2>
 8004a02:	bf00      	nop
 8004a04:	200142bc 	.word	0x200142bc
      break;
 8004a08:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d041      	beq.n	8004a94 <_VPrintTarget+0x35c>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a20:	e00b      	b.n	8004a3a <_VPrintTarget+0x302>
 8004a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	1c59      	adds	r1, r3, #1
 8004a2a:	6439      	str	r1, [r7, #64]	; 0x40
 8004a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a36:	09db      	lsrs	r3, r3, #7
 8004a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004a3e:	d8f0      	bhi.n	8004a22 <_VPrintTarget+0x2ea>
 8004a40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	643a      	str	r2, [r7, #64]	; 0x40
 8004a46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a4e:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a54:	2300      	movs	r3, #0
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
 8004a58:	e00b      	b.n	8004a72 <_VPrintTarget+0x33a>
 8004a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a60:	1c59      	adds	r1, r3, #1
 8004a62:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	09db      	lsrs	r3, r3, #7
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
 8004a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a74:	2b7f      	cmp	r3, #127	; 0x7f
 8004a76:	d8f0      	bhi.n	8004a5a <_VPrintTarget+0x322>
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a80:	b2d2      	uxtb	r2, r2
 8004a82:	701a      	strb	r2, [r3, #0]
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	69b9      	ldr	r1, [r7, #24]
 8004a8c:	221a      	movs	r2, #26
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fbc8 	bl	8004224 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004a9a:	bf00      	nop
 8004a9c:	3758      	adds	r7, #88	; 0x58
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ab8:	4917      	ldr	r1, [pc, #92]	; (8004b18 <SEGGER_SYSVIEW_Init+0x74>)
 8004aba:	4818      	ldr	r0, [pc, #96]	; (8004b1c <SEGGER_SYSVIEW_Init+0x78>)
 8004abc:	f7ff f984 	bl	8003dc8 <SEGGER_RTT_AllocUpBuffer>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ac6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004aca:	785a      	ldrb	r2, [r3, #1]
 8004acc:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ace:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ad2:	7e1b      	ldrb	r3, [r3, #24]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	2308      	movs	r3, #8
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <SEGGER_SYSVIEW_Init+0x80>)
 8004ade:	490f      	ldr	r1, [pc, #60]	; (8004b1c <SEGGER_SYSVIEW_Init+0x78>)
 8004ae0:	f7ff f9f6 	bl	8003ed0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004aea:	4b0f      	ldr	r3, [pc, #60]	; (8004b28 <SEGGER_SYSVIEW_Init+0x84>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a0c      	ldr	r2, [pc, #48]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004af2:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004afe:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004b04:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004b0a:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <SEGGER_SYSVIEW_Init+0x7c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20013284 	.word	0x20013284
 8004b1c:	080061e0 	.word	0x080061e0
 8004b20:	2001428c 	.word	0x2001428c
 8004b24:	20014284 	.word	0x20014284
 8004b28:	e0001004 	.word	0xe0001004

08004b2c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004b34:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6113      	str	r3, [r2, #16]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2001428c 	.word	0x2001428c

08004b4c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b54:	f3ef 8311 	mrs	r3, BASEPRI
 8004b58:	f04f 0120 	mov.w	r1, #32
 8004b5c:	f381 8811 	msr	BASEPRI, r1
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	4808      	ldr	r0, [pc, #32]	; (8004b84 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004b64:	f7ff fa71 	bl	800404a <_PreparePacket>
 8004b68:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	68b8      	ldr	r0, [r7, #8]
 8004b70:	f7ff fb58 	bl	8004224 <_SendPacket>
  RECORD_END();
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f383 8811 	msr	BASEPRI, r3
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	200142bc 	.word	0x200142bc

08004b88 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b92:	f3ef 8311 	mrs	r3, BASEPRI
 8004b96:	f04f 0120 	mov.w	r1, #32
 8004b9a:	f381 8811 	msr	BASEPRI, r1
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	4816      	ldr	r0, [pc, #88]	; (8004bfc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004ba2:	f7ff fa52 	bl	800404a <_PreparePacket>
 8004ba6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	e00b      	b.n	8004bce <SEGGER_SYSVIEW_RecordU32+0x46>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	61f9      	str	r1, [r7, #28]
 8004bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	09db      	lsrs	r3, r3, #7
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8004bd2:	d8f0      	bhi.n	8004bb6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	61fa      	str	r2, [r7, #28]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	6938      	ldr	r0, [r7, #16]
 8004bea:	f7ff fb1b 	bl	8004224 <_SendPacket>
  RECORD_END();
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f383 8811 	msr	BASEPRI, r3
}
 8004bf4:	bf00      	nop
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	200142bc 	.word	0x200142bc

08004c00 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08c      	sub	sp, #48	; 0x30
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c0c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c10:	f04f 0120 	mov.w	r1, #32
 8004c14:	f381 8811 	msr	BASEPRI, r1
 8004c18:	61fb      	str	r3, [r7, #28]
 8004c1a:	4825      	ldr	r0, [pc, #148]	; (8004cb0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004c1c:	f7ff fa15 	bl	800404a <_PreparePacket>
 8004c20:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c2e:	e00b      	b.n	8004c48 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	1c59      	adds	r1, r3, #1
 8004c38:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c44:	09db      	lsrs	r3, r3, #7
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c4c:	d8f0      	bhi.n	8004c30 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	1c5a      	adds	r2, r3, #1
 8004c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c56:	b2d2      	uxtb	r2, r2
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	623b      	str	r3, [r7, #32]
 8004c66:	e00b      	b.n	8004c80 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	1c59      	adds	r1, r3, #1
 8004c70:	6279      	str	r1, [r7, #36]	; 0x24
 8004c72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	09db      	lsrs	r3, r3, #7
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b7f      	cmp	r3, #127	; 0x7f
 8004c84:	d8f0      	bhi.n	8004c68 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	6979      	ldr	r1, [r7, #20]
 8004c9a:	69b8      	ldr	r0, [r7, #24]
 8004c9c:	f7ff fac2 	bl	8004224 <_SendPacket>
  RECORD_END();
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f383 8811 	msr	BASEPRI, r3
}
 8004ca6:	bf00      	nop
 8004ca8:	3730      	adds	r7, #48	; 0x30
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	200142bc 	.word	0x200142bc

08004cb4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	; 0x30
 8004cb8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004cba:	4b59      	ldr	r3, [pc, #356]	; (8004e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004cc0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cc4:	f04f 0120 	mov.w	r1, #32
 8004cc8:	f381 8811 	msr	BASEPRI, r1
 8004ccc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004cce:	4b54      	ldr	r3, [pc, #336]	; (8004e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004cd0:	785b      	ldrb	r3, [r3, #1]
 8004cd2:	220a      	movs	r2, #10
 8004cd4:	4953      	ldr	r1, [pc, #332]	; (8004e24 <SEGGER_SYSVIEW_Start+0x170>)
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fb fa7a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8004ce2:	f7fe fd47 	bl	8003774 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004ce6:	200a      	movs	r0, #10
 8004ce8:	f7ff ff30 	bl	8004b4c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cec:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf0:	f04f 0120 	mov.w	r1, #32
 8004cf4:	f381 8811 	msr	BASEPRI, r1
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	484b      	ldr	r0, [pc, #300]	; (8004e28 <SEGGER_SYSVIEW_Start+0x174>)
 8004cfc:	f7ff f9a5 	bl	800404a <_PreparePacket>
 8004d00:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	4b45      	ldr	r3, [pc, #276]	; (8004e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d10:	e00b      	b.n	8004d2a <SEGGER_SYSVIEW_Start+0x76>
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	1c59      	adds	r1, r3, #1
 8004d1a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004d1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]
 8004d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d26:	09db      	lsrs	r3, r3, #7
 8004d28:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d2e:	d8f0      	bhi.n	8004d12 <SEGGER_SYSVIEW_Start+0x5e>
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	623b      	str	r3, [r7, #32]
 8004d4a:	e00b      	b.n	8004d64 <SEGGER_SYSVIEW_Start+0xb0>
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	b2da      	uxtb	r2, r3
 8004d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d52:	1c59      	adds	r1, r3, #1
 8004d54:	6279      	str	r1, [r7, #36]	; 0x24
 8004d56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	09db      	lsrs	r3, r3, #7
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b7f      	cmp	r3, #127	; 0x7f
 8004d68:	d8f0      	bhi.n	8004d4c <SEGGER_SYSVIEW_Start+0x98>
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	627a      	str	r2, [r7, #36]	; 0x24
 8004d70:	6a3a      	ldr	r2, [r7, #32]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	4b28      	ldr	r3, [pc, #160]	; (8004e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	e00b      	b.n	8004d9e <SEGGER_SYSVIEW_Start+0xea>
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	61f9      	str	r1, [r7, #28]
 8004d90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	09db      	lsrs	r3, r3, #7
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b7f      	cmp	r3, #127	; 0x7f
 8004da2:	d8f0      	bhi.n	8004d86 <SEGGER_SYSVIEW_Start+0xd2>
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	1c5a      	adds	r2, r3, #1
 8004da8:	61fa      	str	r2, [r7, #28]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	2300      	movs	r3, #0
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	e00b      	b.n	8004dd6 <SEGGER_SYSVIEW_Start+0x122>
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1c59      	adds	r1, r3, #1
 8004dc6:	6179      	str	r1, [r7, #20]
 8004dc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dcc:	b2d2      	uxtb	r2, r2
 8004dce:	701a      	strb	r2, [r3, #0]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	09db      	lsrs	r3, r3, #7
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b7f      	cmp	r3, #127	; 0x7f
 8004dda:	d8f0      	bhi.n	8004dbe <SEGGER_SYSVIEW_Start+0x10a>
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	617a      	str	r2, [r7, #20]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004dec:	2218      	movs	r2, #24
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7ff fa17 	bl	8004224 <_SendPacket>
      RECORD_END();
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004dfc:	4b08      	ldr	r3, [pc, #32]	; (8004e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <SEGGER_SYSVIEW_Start+0x16c>)
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004e0a:	f000 f9eb 	bl	80051e4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004e0e:	f000 f9b1 	bl	8005174 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004e12:	f000 fc11 	bl	8005638 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004e16:	bf00      	nop
 8004e18:	3730      	adds	r7, #48	; 0x30
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	2001428c 	.word	0x2001428c
 8004e24:	0800620c 	.word	0x0800620c
 8004e28:	200142bc 	.word	0x200142bc

08004e2c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004e32:	f3ef 8311 	mrs	r3, BASEPRI
 8004e36:	f04f 0120 	mov.w	r1, #32
 8004e3a:	f381 8811 	msr	BASEPRI, r1
 8004e3e:	607b      	str	r3, [r7, #4]
 8004e40:	480b      	ldr	r0, [pc, #44]	; (8004e70 <SEGGER_SYSVIEW_Stop+0x44>)
 8004e42:	f7ff f902 	bl	800404a <_PreparePacket>
 8004e46:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004e50:	220b      	movs	r2, #11
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	f7ff f9e5 	bl	8004224 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <SEGGER_SYSVIEW_Stop+0x48>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f383 8811 	msr	BASEPRI, r3
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	200142bc 	.word	0x200142bc
 8004e74:	2001428c 	.word	0x2001428c

08004e78 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	; 0x30
 8004e7c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e7e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e82:	f04f 0120 	mov.w	r1, #32
 8004e86:	f381 8811 	msr	BASEPRI, r1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	4845      	ldr	r0, [pc, #276]	; (8004fa4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004e8e:	f7ff f8dc 	bl	800404a <_PreparePacket>
 8004e92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9c:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea2:	e00b      	b.n	8004ebc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eaa:	1c59      	adds	r1, r3, #1
 8004eac:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004eae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	09db      	lsrs	r3, r3, #7
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8004ec0:	d8f0      	bhi.n	8004ea4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	623b      	str	r3, [r7, #32]
 8004edc:	e00b      	b.n	8004ef6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1c59      	adds	r1, r3, #1
 8004ee6:	6279      	str	r1, [r7, #36]	; 0x24
 8004ee8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	09db      	lsrs	r3, r3, #7
 8004ef4:	623b      	str	r3, [r7, #32]
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8004efa:	d8f0      	bhi.n	8004ede <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	627a      	str	r2, [r7, #36]	; 0x24
 8004f02:	6a3a      	ldr	r2, [r7, #32]
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	61bb      	str	r3, [r7, #24]
 8004f16:	e00b      	b.n	8004f30 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	1c59      	adds	r1, r3, #1
 8004f20:	61f9      	str	r1, [r7, #28]
 8004f22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	09db      	lsrs	r3, r3, #7
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b7f      	cmp	r3, #127	; 0x7f
 8004f34:	d8f0      	bhi.n	8004f18 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	61fa      	str	r2, [r7, #28]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	e00b      	b.n	8004f68 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	b2da      	uxtb	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1c59      	adds	r1, r3, #1
 8004f58:	6179      	str	r1, [r7, #20]
 8004f5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	09db      	lsrs	r3, r3, #7
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8004f6c:	d8f0      	bhi.n	8004f50 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	1c5a      	adds	r2, r3, #1
 8004f72:	617a      	str	r2, [r7, #20]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f7e:	2218      	movs	r2, #24
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	68b8      	ldr	r0, [r7, #8]
 8004f84:	f7ff f94e 	bl	8004224 <_SendPacket>
  RECORD_END();
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f8e:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004f96:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	4798      	blx	r3
  }
}
 8004f9c:	bf00      	nop
 8004f9e:	3730      	adds	r7, #48	; 0x30
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	200142bc 	.word	0x200142bc
 8004fa8:	2001428c 	.word	0x2001428c

08004fac <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b092      	sub	sp, #72	; 0x48
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004fb4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb8:	f04f 0120 	mov.w	r1, #32
 8004fbc:	f381 8811 	msr	BASEPRI, r1
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	486a      	ldr	r0, [pc, #424]	; (800516c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004fc4:	f7ff f841 	bl	800404a <_PreparePacket>
 8004fc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b66      	ldr	r3, [pc, #408]	; (8005170 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8004fde:	e00b      	b.n	8004ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	6479      	str	r1, [r7, #68]	; 0x44
 8004fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ff4:	09db      	lsrs	r3, r3, #7
 8004ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffc:	d8f0      	bhi.n	8004fe0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	647a      	str	r2, [r7, #68]	; 0x44
 8005004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005006:	b2d2      	uxtb	r2, r2
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
 8005018:	e00b      	b.n	8005032 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	b2da      	uxtb	r2, r3
 800501e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005020:	1c59      	adds	r1, r3, #1
 8005022:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	09db      	lsrs	r3, r3, #7
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b7f      	cmp	r3, #127	; 0x7f
 8005036:	d8f0      	bhi.n	800501a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800503e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005046:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	2220      	movs	r2, #32
 800504e:	4619      	mov	r1, r3
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7fe ffad 	bl	8003fb0 <_EncodeStr>
 8005056:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005058:	2209      	movs	r2, #9
 800505a:	68f9      	ldr	r1, [r7, #12]
 800505c:	6938      	ldr	r0, [r7, #16]
 800505e:	f7ff f8e1 	bl	8004224 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	637b      	str	r3, [r7, #52]	; 0x34
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b40      	ldr	r3, [pc, #256]	; (8005170 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	633b      	str	r3, [r7, #48]	; 0x30
 8005076:	e00b      	b.n	8005090 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	b2da      	uxtb	r2, r3
 800507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800507e:	1c59      	adds	r1, r3, #1
 8005080:	6379      	str	r1, [r7, #52]	; 0x34
 8005082:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	09db      	lsrs	r3, r3, #7
 800508e:	633b      	str	r3, [r7, #48]	; 0x30
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	2b7f      	cmp	r3, #127	; 0x7f
 8005094:	d8f0      	bhi.n	8005078 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	637a      	str	r2, [r7, #52]	; 0x34
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b0:	e00b      	b.n	80050ca <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	1c59      	adds	r1, r3, #1
 80050ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80050bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	09db      	lsrs	r3, r3, #7
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	2b7f      	cmp	r3, #127	; 0x7f
 80050ce:	d8f0      	bhi.n	80050b2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	e00b      	b.n	8005104 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80050ec:	6a3b      	ldr	r3, [r7, #32]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	6279      	str	r1, [r7, #36]	; 0x24
 80050f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	09db      	lsrs	r3, r3, #7
 8005102:	623b      	str	r3, [r7, #32]
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	2b7f      	cmp	r3, #127	; 0x7f
 8005108:	d8f0      	bhi.n	80050ec <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	627a      	str	r2, [r7, #36]	; 0x24
 8005110:	6a3a      	ldr	r2, [r7, #32]
 8005112:	b2d2      	uxtb	r2, r2
 8005114:	701a      	strb	r2, [r3, #0]
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	2300      	movs	r3, #0
 8005120:	61bb      	str	r3, [r7, #24]
 8005122:	e00b      	b.n	800513c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1c59      	adds	r1, r3, #1
 800512c:	61f9      	str	r1, [r7, #28]
 800512e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	09db      	lsrs	r3, r3, #7
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2b7f      	cmp	r3, #127	; 0x7f
 8005140:	d8f0      	bhi.n	8005124 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	b2d2      	uxtb	r2, r2
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005152:	2215      	movs	r2, #21
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	6938      	ldr	r0, [r7, #16]
 8005158:	f7ff f864 	bl	8004224 <_SendPacket>
  RECORD_END();
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f383 8811 	msr	BASEPRI, r3
}
 8005162:	bf00      	nop
 8005164:	3748      	adds	r7, #72	; 0x48
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200142bc 	.word	0x200142bc
 8005170:	2001428c 	.word	0x2001428c

08005174 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005180:	4b05      	ldr	r3, [pc, #20]	; (8005198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800518a:	4b03      	ldr	r3, [pc, #12]	; (8005198 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4798      	blx	r3
  }
}
 8005192:	bf00      	nop
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	2001428c 	.word	0x2001428c

0800519c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051a4:	f3ef 8311 	mrs	r3, BASEPRI
 80051a8:	f04f 0120 	mov.w	r1, #32
 80051ac:	f381 8811 	msr	BASEPRI, r1
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	480b      	ldr	r0, [pc, #44]	; (80051e0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80051b4:	f7fe ff49 	bl	800404a <_PreparePacket>
 80051b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ba:	2280      	movs	r2, #128	; 0x80
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	6938      	ldr	r0, [r7, #16]
 80051c0:	f7fe fef6 	bl	8003fb0 <_EncodeStr>
 80051c4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80051c6:	220e      	movs	r2, #14
 80051c8:	68f9      	ldr	r1, [r7, #12]
 80051ca:	6938      	ldr	r0, [r7, #16]
 80051cc:	f7ff f82a 	bl	8004224 <_SendPacket>
  RECORD_END();
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f383 8811 	msr	BASEPRI, r3
}
 80051d6:	bf00      	nop
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	200142bc 	.word	0x200142bc

080051e4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80051ea:	4b14      	ldr	r3, [pc, #80]	; (800523c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d019      	beq.n	8005226 <SEGGER_SYSVIEW_RecordSystime+0x42>
 80051f2:	4b12      	ldr	r3, [pc, #72]	; (800523c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d014      	beq.n	8005226 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4798      	blx	r3
 8005204:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005208:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800520a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	f04f 0400 	mov.w	r4, #0
 8005216:	0013      	movs	r3, r2
 8005218:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800521a:	461a      	mov	r2, r3
 800521c:	4601      	mov	r1, r0
 800521e:	200d      	movs	r0, #13
 8005220:	f7ff fcee 	bl	8004c00 <SEGGER_SYSVIEW_RecordU32x2>
 8005224:	e005      	b.n	8005232 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	200c      	movs	r0, #12
 800522e:	f7ff fcab 	bl	8004b88 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	bd90      	pop	{r4, r7, pc}
 800523a:	bf00      	nop
 800523c:	2001428c 	.word	0x2001428c
 8005240:	e0001004 	.word	0xe0001004

08005244 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800524a:	f3ef 8311 	mrs	r3, BASEPRI
 800524e:	f04f 0120 	mov.w	r1, #32
 8005252:	f381 8811 	msr	BASEPRI, r1
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	4819      	ldr	r0, [pc, #100]	; (80052c0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800525a:	f7fe fef6 	bl	800404a <_PreparePacket>
 800525e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005264:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	617b      	str	r3, [r7, #20]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e00b      	b.n	8005290 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	1c59      	adds	r1, r3, #1
 8005280:	6179      	str	r1, [r7, #20]
 8005282:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	09db      	lsrs	r3, r3, #7
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b7f      	cmp	r3, #127	; 0x7f
 8005294:	d8f0      	bhi.n	8005278 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1c5a      	adds	r2, r3, #1
 800529a:	617a      	str	r2, [r7, #20]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80052a6:	2202      	movs	r2, #2
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	68b8      	ldr	r0, [r7, #8]
 80052ac:	f7fe ffba 	bl	8004224 <_SendPacket>
  RECORD_END();
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f383 8811 	msr	BASEPRI, r3
}
 80052b6:	bf00      	nop
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	200142bc 	.word	0x200142bc
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80052ce:	f3ef 8311 	mrs	r3, BASEPRI
 80052d2:	f04f 0120 	mov.w	r1, #32
 80052d6:	f381 8811 	msr	BASEPRI, r1
 80052da:	607b      	str	r3, [r7, #4]
 80052dc:	4807      	ldr	r0, [pc, #28]	; (80052fc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80052de:	f7fe feb4 	bl	800404a <_PreparePacket>
 80052e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80052e4:	2203      	movs	r2, #3
 80052e6:	6839      	ldr	r1, [r7, #0]
 80052e8:	6838      	ldr	r0, [r7, #0]
 80052ea:	f7fe ff9b 	bl	8004224 <_SendPacket>
  RECORD_END();
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f383 8811 	msr	BASEPRI, r3
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	200142bc 	.word	0x200142bc

08005300 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005306:	f3ef 8311 	mrs	r3, BASEPRI
 800530a:	f04f 0120 	mov.w	r1, #32
 800530e:	f381 8811 	msr	BASEPRI, r1
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	4807      	ldr	r0, [pc, #28]	; (8005334 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005316:	f7fe fe98 	bl	800404a <_PreparePacket>
 800531a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800531c:	2212      	movs	r2, #18
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6838      	ldr	r0, [r7, #0]
 8005322:	f7fe ff7f 	bl	8004224 <_SendPacket>
  RECORD_END();
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f383 8811 	msr	BASEPRI, r3
}
 800532c:	bf00      	nop
 800532e:	3708      	adds	r7, #8
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	200142bc 	.word	0x200142bc

08005338 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800533e:	f3ef 8311 	mrs	r3, BASEPRI
 8005342:	f04f 0120 	mov.w	r1, #32
 8005346:	f381 8811 	msr	BASEPRI, r1
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	4807      	ldr	r0, [pc, #28]	; (800536c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800534e:	f7fe fe7c 	bl	800404a <_PreparePacket>
 8005352:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005354:	2211      	movs	r2, #17
 8005356:	6839      	ldr	r1, [r7, #0]
 8005358:	6838      	ldr	r0, [r7, #0]
 800535a:	f7fe ff63 	bl	8004224 <_SendPacket>
  RECORD_END();
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f383 8811 	msr	BASEPRI, r3
}
 8005364:	bf00      	nop
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	200142bc 	.word	0x200142bc

08005370 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005378:	f3ef 8311 	mrs	r3, BASEPRI
 800537c:	f04f 0120 	mov.w	r1, #32
 8005380:	f381 8811 	msr	BASEPRI, r1
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	4819      	ldr	r0, [pc, #100]	; (80053ec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005388:	f7fe fe5f 	bl	800404a <_PreparePacket>
 800538c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005392:	4b17      	ldr	r3, [pc, #92]	; (80053f0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	61fb      	str	r3, [r7, #28]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	e00b      	b.n	80053be <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	61f9      	str	r1, [r7, #28]
 80053b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	09db      	lsrs	r3, r3, #7
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	2b7f      	cmp	r3, #127	; 0x7f
 80053c2:	d8f0      	bhi.n	80053a6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	61fa      	str	r2, [r7, #28]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80053d4:	2208      	movs	r2, #8
 80053d6:	68f9      	ldr	r1, [r7, #12]
 80053d8:	6938      	ldr	r0, [r7, #16]
 80053da:	f7fe ff23 	bl	8004224 <_SendPacket>
  RECORD_END();
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f383 8811 	msr	BASEPRI, r3
}
 80053e4:	bf00      	nop
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	200142bc 	.word	0x200142bc
 80053f0:	2001428c 	.word	0x2001428c

080053f4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b088      	sub	sp, #32
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005400:	f04f 0120 	mov.w	r1, #32
 8005404:	f381 8811 	msr	BASEPRI, r1
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	4819      	ldr	r0, [pc, #100]	; (8005470 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800540c:	f7fe fe1d 	bl	800404a <_PreparePacket>
 8005410:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	61fb      	str	r3, [r7, #28]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	61bb      	str	r3, [r7, #24]
 8005428:	e00b      	b.n	8005442 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	1c59      	adds	r1, r3, #1
 8005432:	61f9      	str	r1, [r7, #28]
 8005434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	09db      	lsrs	r3, r3, #7
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b7f      	cmp	r3, #127	; 0x7f
 8005446:	d8f0      	bhi.n	800542a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	61fa      	str	r2, [r7, #28]
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005458:	2204      	movs	r2, #4
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	6938      	ldr	r0, [r7, #16]
 800545e:	f7fe fee1 	bl	8004224 <_SendPacket>
  RECORD_END();
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f383 8811 	msr	BASEPRI, r3
}
 8005468:	bf00      	nop
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	200142bc 	.word	0x200142bc
 8005474:	2001428c 	.word	0x2001428c

08005478 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005480:	f3ef 8311 	mrs	r3, BASEPRI
 8005484:	f04f 0120 	mov.w	r1, #32
 8005488:	f381 8811 	msr	BASEPRI, r1
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	4819      	ldr	r0, [pc, #100]	; (80054f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005490:	f7fe fddb 	bl	800404a <_PreparePacket>
 8005494:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	61bb      	str	r3, [r7, #24]
 80054ac:	e00b      	b.n	80054c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	1c59      	adds	r1, r3, #1
 80054b6:	61f9      	str	r1, [r7, #28]
 80054b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054bc:	b2d2      	uxtb	r2, r2
 80054be:	701a      	strb	r2, [r3, #0]
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	09db      	lsrs	r3, r3, #7
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ca:	d8f0      	bhi.n	80054ae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	61fa      	str	r2, [r7, #28]
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80054dc:	2206      	movs	r2, #6
 80054de:	68f9      	ldr	r1, [r7, #12]
 80054e0:	6938      	ldr	r0, [r7, #16]
 80054e2:	f7fe fe9f 	bl	8004224 <_SendPacket>
  RECORD_END();
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f383 8811 	msr	BASEPRI, r3
}
 80054ec:	bf00      	nop
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	200142bc 	.word	0x200142bc
 80054f8:	2001428c 	.word	0x2001428c

080054fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08c      	sub	sp, #48	; 0x30
 8005500:	af00      	add	r7, sp, #0
 8005502:	4603      	mov	r3, r0
 8005504:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005506:	4b3b      	ldr	r3, [pc, #236]	; (80055f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d06d      	beq.n	80055ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800550e:	4b39      	ldr	r3, [pc, #228]	; (80055f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005514:	2300      	movs	r3, #0
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
 8005518:	e008      	b.n	800552c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005528:	3301      	adds	r3, #1
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005530:	429a      	cmp	r2, r3
 8005532:	d3f2      	bcc.n	800551a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005534:	e000      	b.n	8005538 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005536:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d055      	beq.n	80055ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800553e:	f3ef 8311 	mrs	r3, BASEPRI
 8005542:	f04f 0120 	mov.w	r1, #32
 8005546:	f381 8811 	msr	BASEPRI, r1
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	482a      	ldr	r0, [pc, #168]	; (80055f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800554e:	f7fe fd7c 	bl	800404a <_PreparePacket>
 8005552:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	623b      	str	r3, [r7, #32]
 8005560:	e00b      	b.n	800557a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	b2da      	uxtb	r2, r3
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	1c59      	adds	r1, r3, #1
 800556a:	6279      	str	r1, [r7, #36]	; 0x24
 800556c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	09db      	lsrs	r3, r3, #7
 8005578:	623b      	str	r3, [r7, #32]
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	2b7f      	cmp	r3, #127	; 0x7f
 800557e:	d8f0      	bhi.n	8005562 <SEGGER_SYSVIEW_SendModule+0x66>
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	627a      	str	r2, [r7, #36]	; 0x24
 8005586:	6a3a      	ldr	r2, [r7, #32]
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	61bb      	str	r3, [r7, #24]
 800559a:	e00b      	b.n	80055b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	1c59      	adds	r1, r3, #1
 80055a4:	61f9      	str	r1, [r7, #28]
 80055a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	09db      	lsrs	r3, r3, #7
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	2b7f      	cmp	r3, #127	; 0x7f
 80055b8:	d8f0      	bhi.n	800559c <SEGGER_SYSVIEW_SendModule+0xa0>
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	61fa      	str	r2, [r7, #28]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	4619      	mov	r1, r3
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7fe fcec 	bl	8003fb0 <_EncodeStr>
 80055d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80055da:	2216      	movs	r2, #22
 80055dc:	68f9      	ldr	r1, [r7, #12]
 80055de:	6938      	ldr	r0, [r7, #16]
 80055e0:	f7fe fe20 	bl	8004224 <_SendPacket>
      RECORD_END();
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80055ea:	bf00      	nop
 80055ec:	3730      	adds	r7, #48	; 0x30
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	200142b4 	.word	0x200142b4
 80055f8:	200142bc 	.word	0x200142bc

080055fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00f      	beq.n	800562a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800560a:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d002      	beq.n	800561e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f2      	bne.n	8005610 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	200142b4 	.word	0x200142b4

08005638 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800563e:	f3ef 8311 	mrs	r3, BASEPRI
 8005642:	f04f 0120 	mov.w	r1, #32
 8005646:	f381 8811 	msr	BASEPRI, r1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	4817      	ldr	r0, [pc, #92]	; (80056ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800564e:	f7fe fcfc 	bl	800404a <_PreparePacket>
 8005652:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	4b14      	ldr	r3, [pc, #80]	; (80056b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e00b      	b.n	800567c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	6179      	str	r1, [r7, #20]
 800566e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	09db      	lsrs	r3, r3, #7
 800567a:	613b      	str	r3, [r7, #16]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b7f      	cmp	r3, #127	; 0x7f
 8005680:	d8f0      	bhi.n	8005664 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	617a      	str	r2, [r7, #20]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005692:	221b      	movs	r2, #27
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	68b8      	ldr	r0, [r7, #8]
 8005698:	f7fe fdc4 	bl	8004224 <_SendPacket>
  RECORD_END();
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f383 8811 	msr	BASEPRI, r3
}
 80056a2:	bf00      	nop
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	200142bc 	.word	0x200142bc
 80056b0:	200142b8 	.word	0x200142b8

080056b4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80056b4:	b40f      	push	{r0, r1, r2, r3}
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b082      	sub	sp, #8
 80056ba:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80056bc:	f107 0314 	add.w	r3, r7, #20
 80056c0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80056c2:	1d3b      	adds	r3, r7, #4
 80056c4:	461a      	mov	r2, r3
 80056c6:	2100      	movs	r1, #0
 80056c8:	6938      	ldr	r0, [r7, #16]
 80056ca:	f7ff f835 	bl	8004738 <_VPrintTarget>
  va_end(ParamList);
}
 80056ce:	bf00      	nop
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056d8:	b004      	add	sp, #16
 80056da:	4770      	bx	lr

080056dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b08a      	sub	sp, #40	; 0x28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056e4:	f3ef 8311 	mrs	r3, BASEPRI
 80056e8:	f04f 0120 	mov.w	r1, #32
 80056ec:	f381 8811 	msr	BASEPRI, r1
 80056f0:	617b      	str	r3, [r7, #20]
 80056f2:	4827      	ldr	r0, [pc, #156]	; (8005790 <SEGGER_SYSVIEW_Warn+0xb4>)
 80056f4:	f7fe fca9 	bl	800404a <_PreparePacket>
 80056f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056fa:	2280      	movs	r2, #128	; 0x80
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	6938      	ldr	r0, [r7, #16]
 8005700:	f7fe fc56 	bl	8003fb0 <_EncodeStr>
 8005704:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
 800570a:	2301      	movs	r3, #1
 800570c:	623b      	str	r3, [r7, #32]
 800570e:	e00b      	b.n	8005728 <SEGGER_SYSVIEW_Warn+0x4c>
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	b2da      	uxtb	r2, r3
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	1c59      	adds	r1, r3, #1
 8005718:	6279      	str	r1, [r7, #36]	; 0x24
 800571a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800571e:	b2d2      	uxtb	r2, r2
 8005720:	701a      	strb	r2, [r3, #0]
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	09db      	lsrs	r3, r3, #7
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	6a3b      	ldr	r3, [r7, #32]
 800572a:	2b7f      	cmp	r3, #127	; 0x7f
 800572c:	d8f0      	bhi.n	8005710 <SEGGER_SYSVIEW_Warn+0x34>
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	1c5a      	adds	r2, r3, #1
 8005732:	627a      	str	r2, [r7, #36]	; 0x24
 8005734:	6a3a      	ldr	r2, [r7, #32]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	61fb      	str	r3, [r7, #28]
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e00b      	b.n	8005760 <SEGGER_SYSVIEW_Warn+0x84>
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	1c59      	adds	r1, r3, #1
 8005750:	61f9      	str	r1, [r7, #28]
 8005752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005756:	b2d2      	uxtb	r2, r2
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	09db      	lsrs	r3, r3, #7
 800575e:	61bb      	str	r3, [r7, #24]
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b7f      	cmp	r3, #127	; 0x7f
 8005764:	d8f0      	bhi.n	8005748 <SEGGER_SYSVIEW_Warn+0x6c>
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	61fa      	str	r2, [r7, #28]
 800576c:	69ba      	ldr	r2, [r7, #24]
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005776:	221a      	movs	r2, #26
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	6938      	ldr	r0, [r7, #16]
 800577c:	f7fe fd52 	bl	8004224 <_SendPacket>
  RECORD_END();
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f383 8811 	msr	BASEPRI, r3
}
 8005786:	bf00      	nop
 8005788:	3728      	adds	r7, #40	; 0x28
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	200142bc 	.word	0x200142bc

08005794 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005798:	4b13      	ldr	r3, [pc, #76]	; (80057e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800579a:	7e1b      	ldrb	r3, [r3, #24]
 800579c:	4619      	mov	r1, r3
 800579e:	4a13      	ldr	r2, [pc, #76]	; (80057ec <SEGGER_SYSVIEW_IsStarted+0x58>)
 80057a0:	460b      	mov	r3, r1
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	440b      	add	r3, r1
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	4413      	add	r3, r2
 80057aa:	336c      	adds	r3, #108	; 0x6c
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057b0:	7e1b      	ldrb	r3, [r3, #24]
 80057b2:	4618      	mov	r0, r3
 80057b4:	490d      	ldr	r1, [pc, #52]	; (80057ec <SEGGER_SYSVIEW_IsStarted+0x58>)
 80057b6:	4603      	mov	r3, r0
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	4403      	add	r3, r0
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	440b      	add	r3, r1
 80057c0:	3370      	adds	r3, #112	; 0x70
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d00b      	beq.n	80057e0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057c8:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057ca:	789b      	ldrb	r3, [r3, #2]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d107      	bne.n	80057e0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057d6:	f7fe fc45 	bl	8004064 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057da:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057dc:	2200      	movs	r2, #0
 80057de:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80057e0:	4b01      	ldr	r3, [pc, #4]	; (80057e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	2001428c 	.word	0x2001428c
 80057ec:	200143f0 	.word	0x200143f0

080057f0 <__libc_init_array>:
 80057f0:	b570      	push	{r4, r5, r6, lr}
 80057f2:	4e0d      	ldr	r6, [pc, #52]	; (8005828 <__libc_init_array+0x38>)
 80057f4:	4c0d      	ldr	r4, [pc, #52]	; (800582c <__libc_init_array+0x3c>)
 80057f6:	1ba4      	subs	r4, r4, r6
 80057f8:	10a4      	asrs	r4, r4, #2
 80057fa:	2500      	movs	r5, #0
 80057fc:	42a5      	cmp	r5, r4
 80057fe:	d109      	bne.n	8005814 <__libc_init_array+0x24>
 8005800:	4e0b      	ldr	r6, [pc, #44]	; (8005830 <__libc_init_array+0x40>)
 8005802:	4c0c      	ldr	r4, [pc, #48]	; (8005834 <__libc_init_array+0x44>)
 8005804:	f000 fc58 	bl	80060b8 <_init>
 8005808:	1ba4      	subs	r4, r4, r6
 800580a:	10a4      	asrs	r4, r4, #2
 800580c:	2500      	movs	r5, #0
 800580e:	42a5      	cmp	r5, r4
 8005810:	d105      	bne.n	800581e <__libc_init_array+0x2e>
 8005812:	bd70      	pop	{r4, r5, r6, pc}
 8005814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005818:	4798      	blx	r3
 800581a:	3501      	adds	r5, #1
 800581c:	e7ee      	b.n	80057fc <__libc_init_array+0xc>
 800581e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005822:	4798      	blx	r3
 8005824:	3501      	adds	r5, #1
 8005826:	e7f2      	b.n	800580e <__libc_init_array+0x1e>
 8005828:	08006264 	.word	0x08006264
 800582c:	08006264 	.word	0x08006264
 8005830:	08006264 	.word	0x08006264
 8005834:	08006268 	.word	0x08006268

08005838 <memcmp>:
 8005838:	b530      	push	{r4, r5, lr}
 800583a:	2400      	movs	r4, #0
 800583c:	42a2      	cmp	r2, r4
 800583e:	d101      	bne.n	8005844 <memcmp+0xc>
 8005840:	2000      	movs	r0, #0
 8005842:	e007      	b.n	8005854 <memcmp+0x1c>
 8005844:	5d03      	ldrb	r3, [r0, r4]
 8005846:	3401      	adds	r4, #1
 8005848:	190d      	adds	r5, r1, r4
 800584a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800584e:	42ab      	cmp	r3, r5
 8005850:	d0f4      	beq.n	800583c <memcmp+0x4>
 8005852:	1b58      	subs	r0, r3, r5
 8005854:	bd30      	pop	{r4, r5, pc}

08005856 <memcpy>:
 8005856:	b510      	push	{r4, lr}
 8005858:	1e43      	subs	r3, r0, #1
 800585a:	440a      	add	r2, r1
 800585c:	4291      	cmp	r1, r2
 800585e:	d100      	bne.n	8005862 <memcpy+0xc>
 8005860:	bd10      	pop	{r4, pc}
 8005862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800586a:	e7f7      	b.n	800585c <memcpy+0x6>

0800586c <memset>:
 800586c:	4402      	add	r2, r0
 800586e:	4603      	mov	r3, r0
 8005870:	4293      	cmp	r3, r2
 8005872:	d100      	bne.n	8005876 <memset+0xa>
 8005874:	4770      	bx	lr
 8005876:	f803 1b01 	strb.w	r1, [r3], #1
 800587a:	e7f9      	b.n	8005870 <memset+0x4>

0800587c <sniprintf>:
 800587c:	b40c      	push	{r2, r3}
 800587e:	b530      	push	{r4, r5, lr}
 8005880:	4b17      	ldr	r3, [pc, #92]	; (80058e0 <sniprintf+0x64>)
 8005882:	1e0c      	subs	r4, r1, #0
 8005884:	b09d      	sub	sp, #116	; 0x74
 8005886:	681d      	ldr	r5, [r3, #0]
 8005888:	da08      	bge.n	800589c <sniprintf+0x20>
 800588a:	238b      	movs	r3, #139	; 0x8b
 800588c:	602b      	str	r3, [r5, #0]
 800588e:	f04f 30ff 	mov.w	r0, #4294967295
 8005892:	b01d      	add	sp, #116	; 0x74
 8005894:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005898:	b002      	add	sp, #8
 800589a:	4770      	bx	lr
 800589c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80058a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80058a4:	bf14      	ite	ne
 80058a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80058aa:	4623      	moveq	r3, r4
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	9307      	str	r3, [sp, #28]
 80058b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058b4:	9002      	str	r0, [sp, #8]
 80058b6:	9006      	str	r0, [sp, #24]
 80058b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80058bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058be:	ab21      	add	r3, sp, #132	; 0x84
 80058c0:	a902      	add	r1, sp, #8
 80058c2:	4628      	mov	r0, r5
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	f000 f867 	bl	8005998 <_svfiprintf_r>
 80058ca:	1c43      	adds	r3, r0, #1
 80058cc:	bfbc      	itt	lt
 80058ce:	238b      	movlt	r3, #139	; 0x8b
 80058d0:	602b      	strlt	r3, [r5, #0]
 80058d2:	2c00      	cmp	r4, #0
 80058d4:	d0dd      	beq.n	8005892 <sniprintf+0x16>
 80058d6:	9b02      	ldr	r3, [sp, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e7d9      	b.n	8005892 <sniprintf+0x16>
 80058de:	bf00      	nop
 80058e0:	2000001c 	.word	0x2000001c

080058e4 <__ssputs_r>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	688e      	ldr	r6, [r1, #8]
 80058ea:	429e      	cmp	r6, r3
 80058ec:	4682      	mov	sl, r0
 80058ee:	460c      	mov	r4, r1
 80058f0:	4690      	mov	r8, r2
 80058f2:	4699      	mov	r9, r3
 80058f4:	d837      	bhi.n	8005966 <__ssputs_r+0x82>
 80058f6:	898a      	ldrh	r2, [r1, #12]
 80058f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058fc:	d031      	beq.n	8005962 <__ssputs_r+0x7e>
 80058fe:	6825      	ldr	r5, [r4, #0]
 8005900:	6909      	ldr	r1, [r1, #16]
 8005902:	1a6f      	subs	r7, r5, r1
 8005904:	6965      	ldr	r5, [r4, #20]
 8005906:	2302      	movs	r3, #2
 8005908:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800590c:	fb95 f5f3 	sdiv	r5, r5, r3
 8005910:	f109 0301 	add.w	r3, r9, #1
 8005914:	443b      	add	r3, r7
 8005916:	429d      	cmp	r5, r3
 8005918:	bf38      	it	cc
 800591a:	461d      	movcc	r5, r3
 800591c:	0553      	lsls	r3, r2, #21
 800591e:	d530      	bpl.n	8005982 <__ssputs_r+0x9e>
 8005920:	4629      	mov	r1, r5
 8005922:	f000 fb21 	bl	8005f68 <_malloc_r>
 8005926:	4606      	mov	r6, r0
 8005928:	b950      	cbnz	r0, 8005940 <__ssputs_r+0x5c>
 800592a:	230c      	movs	r3, #12
 800592c:	f8ca 3000 	str.w	r3, [sl]
 8005930:	89a3      	ldrh	r3, [r4, #12]
 8005932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005936:	81a3      	strh	r3, [r4, #12]
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	463a      	mov	r2, r7
 8005942:	6921      	ldr	r1, [r4, #16]
 8005944:	f7ff ff87 	bl	8005856 <memcpy>
 8005948:	89a3      	ldrh	r3, [r4, #12]
 800594a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800594e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005952:	81a3      	strh	r3, [r4, #12]
 8005954:	6126      	str	r6, [r4, #16]
 8005956:	6165      	str	r5, [r4, #20]
 8005958:	443e      	add	r6, r7
 800595a:	1bed      	subs	r5, r5, r7
 800595c:	6026      	str	r6, [r4, #0]
 800595e:	60a5      	str	r5, [r4, #8]
 8005960:	464e      	mov	r6, r9
 8005962:	454e      	cmp	r6, r9
 8005964:	d900      	bls.n	8005968 <__ssputs_r+0x84>
 8005966:	464e      	mov	r6, r9
 8005968:	4632      	mov	r2, r6
 800596a:	4641      	mov	r1, r8
 800596c:	6820      	ldr	r0, [r4, #0]
 800596e:	f000 fa93 	bl	8005e98 <memmove>
 8005972:	68a3      	ldr	r3, [r4, #8]
 8005974:	1b9b      	subs	r3, r3, r6
 8005976:	60a3      	str	r3, [r4, #8]
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	441e      	add	r6, r3
 800597c:	6026      	str	r6, [r4, #0]
 800597e:	2000      	movs	r0, #0
 8005980:	e7dc      	b.n	800593c <__ssputs_r+0x58>
 8005982:	462a      	mov	r2, r5
 8005984:	f000 fb4a 	bl	800601c <_realloc_r>
 8005988:	4606      	mov	r6, r0
 800598a:	2800      	cmp	r0, #0
 800598c:	d1e2      	bne.n	8005954 <__ssputs_r+0x70>
 800598e:	6921      	ldr	r1, [r4, #16]
 8005990:	4650      	mov	r0, sl
 8005992:	f000 fa9b 	bl	8005ecc <_free_r>
 8005996:	e7c8      	b.n	800592a <__ssputs_r+0x46>

08005998 <_svfiprintf_r>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	461d      	mov	r5, r3
 800599e:	898b      	ldrh	r3, [r1, #12]
 80059a0:	061f      	lsls	r7, r3, #24
 80059a2:	b09d      	sub	sp, #116	; 0x74
 80059a4:	4680      	mov	r8, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	4616      	mov	r6, r2
 80059aa:	d50f      	bpl.n	80059cc <_svfiprintf_r+0x34>
 80059ac:	690b      	ldr	r3, [r1, #16]
 80059ae:	b96b      	cbnz	r3, 80059cc <_svfiprintf_r+0x34>
 80059b0:	2140      	movs	r1, #64	; 0x40
 80059b2:	f000 fad9 	bl	8005f68 <_malloc_r>
 80059b6:	6020      	str	r0, [r4, #0]
 80059b8:	6120      	str	r0, [r4, #16]
 80059ba:	b928      	cbnz	r0, 80059c8 <_svfiprintf_r+0x30>
 80059bc:	230c      	movs	r3, #12
 80059be:	f8c8 3000 	str.w	r3, [r8]
 80059c2:	f04f 30ff 	mov.w	r0, #4294967295
 80059c6:	e0c8      	b.n	8005b5a <_svfiprintf_r+0x1c2>
 80059c8:	2340      	movs	r3, #64	; 0x40
 80059ca:	6163      	str	r3, [r4, #20]
 80059cc:	2300      	movs	r3, #0
 80059ce:	9309      	str	r3, [sp, #36]	; 0x24
 80059d0:	2320      	movs	r3, #32
 80059d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059d6:	2330      	movs	r3, #48	; 0x30
 80059d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059dc:	9503      	str	r5, [sp, #12]
 80059de:	f04f 0b01 	mov.w	fp, #1
 80059e2:	4637      	mov	r7, r6
 80059e4:	463d      	mov	r5, r7
 80059e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059ea:	b10b      	cbz	r3, 80059f0 <_svfiprintf_r+0x58>
 80059ec:	2b25      	cmp	r3, #37	; 0x25
 80059ee:	d13e      	bne.n	8005a6e <_svfiprintf_r+0xd6>
 80059f0:	ebb7 0a06 	subs.w	sl, r7, r6
 80059f4:	d00b      	beq.n	8005a0e <_svfiprintf_r+0x76>
 80059f6:	4653      	mov	r3, sl
 80059f8:	4632      	mov	r2, r6
 80059fa:	4621      	mov	r1, r4
 80059fc:	4640      	mov	r0, r8
 80059fe:	f7ff ff71 	bl	80058e4 <__ssputs_r>
 8005a02:	3001      	adds	r0, #1
 8005a04:	f000 80a4 	beq.w	8005b50 <_svfiprintf_r+0x1b8>
 8005a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a0a:	4453      	add	r3, sl
 8005a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a0e:	783b      	ldrb	r3, [r7, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	f000 809d 	beq.w	8005b50 <_svfiprintf_r+0x1b8>
 8005a16:	2300      	movs	r3, #0
 8005a18:	f04f 32ff 	mov.w	r2, #4294967295
 8005a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a20:	9304      	str	r3, [sp, #16]
 8005a22:	9307      	str	r3, [sp, #28]
 8005a24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a28:	931a      	str	r3, [sp, #104]	; 0x68
 8005a2a:	462f      	mov	r7, r5
 8005a2c:	2205      	movs	r2, #5
 8005a2e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a32:	4850      	ldr	r0, [pc, #320]	; (8005b74 <_svfiprintf_r+0x1dc>)
 8005a34:	f7fa fc1c 	bl	8000270 <memchr>
 8005a38:	9b04      	ldr	r3, [sp, #16]
 8005a3a:	b9d0      	cbnz	r0, 8005a72 <_svfiprintf_r+0xda>
 8005a3c:	06d9      	lsls	r1, r3, #27
 8005a3e:	bf44      	itt	mi
 8005a40:	2220      	movmi	r2, #32
 8005a42:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a46:	071a      	lsls	r2, r3, #28
 8005a48:	bf44      	itt	mi
 8005a4a:	222b      	movmi	r2, #43	; 0x2b
 8005a4c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a50:	782a      	ldrb	r2, [r5, #0]
 8005a52:	2a2a      	cmp	r2, #42	; 0x2a
 8005a54:	d015      	beq.n	8005a82 <_svfiprintf_r+0xea>
 8005a56:	9a07      	ldr	r2, [sp, #28]
 8005a58:	462f      	mov	r7, r5
 8005a5a:	2000      	movs	r0, #0
 8005a5c:	250a      	movs	r5, #10
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a64:	3b30      	subs	r3, #48	; 0x30
 8005a66:	2b09      	cmp	r3, #9
 8005a68:	d94d      	bls.n	8005b06 <_svfiprintf_r+0x16e>
 8005a6a:	b1b8      	cbz	r0, 8005a9c <_svfiprintf_r+0x104>
 8005a6c:	e00f      	b.n	8005a8e <_svfiprintf_r+0xf6>
 8005a6e:	462f      	mov	r7, r5
 8005a70:	e7b8      	b.n	80059e4 <_svfiprintf_r+0x4c>
 8005a72:	4a40      	ldr	r2, [pc, #256]	; (8005b74 <_svfiprintf_r+0x1dc>)
 8005a74:	1a80      	subs	r0, r0, r2
 8005a76:	fa0b f000 	lsl.w	r0, fp, r0
 8005a7a:	4318      	orrs	r0, r3
 8005a7c:	9004      	str	r0, [sp, #16]
 8005a7e:	463d      	mov	r5, r7
 8005a80:	e7d3      	b.n	8005a2a <_svfiprintf_r+0x92>
 8005a82:	9a03      	ldr	r2, [sp, #12]
 8005a84:	1d11      	adds	r1, r2, #4
 8005a86:	6812      	ldr	r2, [r2, #0]
 8005a88:	9103      	str	r1, [sp, #12]
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	db01      	blt.n	8005a92 <_svfiprintf_r+0xfa>
 8005a8e:	9207      	str	r2, [sp, #28]
 8005a90:	e004      	b.n	8005a9c <_svfiprintf_r+0x104>
 8005a92:	4252      	negs	r2, r2
 8005a94:	f043 0302 	orr.w	r3, r3, #2
 8005a98:	9207      	str	r2, [sp, #28]
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	783b      	ldrb	r3, [r7, #0]
 8005a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8005aa0:	d10c      	bne.n	8005abc <_svfiprintf_r+0x124>
 8005aa2:	787b      	ldrb	r3, [r7, #1]
 8005aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa6:	d133      	bne.n	8005b10 <_svfiprintf_r+0x178>
 8005aa8:	9b03      	ldr	r3, [sp, #12]
 8005aaa:	1d1a      	adds	r2, r3, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	9203      	str	r2, [sp, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	bfb8      	it	lt
 8005ab4:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ab8:	3702      	adds	r7, #2
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	4d2e      	ldr	r5, [pc, #184]	; (8005b78 <_svfiprintf_r+0x1e0>)
 8005abe:	7839      	ldrb	r1, [r7, #0]
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	f7fa fbd4 	bl	8000270 <memchr>
 8005ac8:	b138      	cbz	r0, 8005ada <_svfiprintf_r+0x142>
 8005aca:	2340      	movs	r3, #64	; 0x40
 8005acc:	1b40      	subs	r0, r0, r5
 8005ace:	fa03 f000 	lsl.w	r0, r3, r0
 8005ad2:	9b04      	ldr	r3, [sp, #16]
 8005ad4:	4303      	orrs	r3, r0
 8005ad6:	3701      	adds	r7, #1
 8005ad8:	9304      	str	r3, [sp, #16]
 8005ada:	7839      	ldrb	r1, [r7, #0]
 8005adc:	4827      	ldr	r0, [pc, #156]	; (8005b7c <_svfiprintf_r+0x1e4>)
 8005ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ae2:	2206      	movs	r2, #6
 8005ae4:	1c7e      	adds	r6, r7, #1
 8005ae6:	f7fa fbc3 	bl	8000270 <memchr>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d038      	beq.n	8005b60 <_svfiprintf_r+0x1c8>
 8005aee:	4b24      	ldr	r3, [pc, #144]	; (8005b80 <_svfiprintf_r+0x1e8>)
 8005af0:	bb13      	cbnz	r3, 8005b38 <_svfiprintf_r+0x1a0>
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	3307      	adds	r3, #7
 8005af6:	f023 0307 	bic.w	r3, r3, #7
 8005afa:	3308      	adds	r3, #8
 8005afc:	9303      	str	r3, [sp, #12]
 8005afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b00:	444b      	add	r3, r9
 8005b02:	9309      	str	r3, [sp, #36]	; 0x24
 8005b04:	e76d      	b.n	80059e2 <_svfiprintf_r+0x4a>
 8005b06:	fb05 3202 	mla	r2, r5, r2, r3
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	460f      	mov	r7, r1
 8005b0e:	e7a6      	b.n	8005a5e <_svfiprintf_r+0xc6>
 8005b10:	2300      	movs	r3, #0
 8005b12:	3701      	adds	r7, #1
 8005b14:	9305      	str	r3, [sp, #20]
 8005b16:	4619      	mov	r1, r3
 8005b18:	250a      	movs	r5, #10
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b20:	3a30      	subs	r2, #48	; 0x30
 8005b22:	2a09      	cmp	r2, #9
 8005b24:	d903      	bls.n	8005b2e <_svfiprintf_r+0x196>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0c8      	beq.n	8005abc <_svfiprintf_r+0x124>
 8005b2a:	9105      	str	r1, [sp, #20]
 8005b2c:	e7c6      	b.n	8005abc <_svfiprintf_r+0x124>
 8005b2e:	fb05 2101 	mla	r1, r5, r1, r2
 8005b32:	2301      	movs	r3, #1
 8005b34:	4607      	mov	r7, r0
 8005b36:	e7f0      	b.n	8005b1a <_svfiprintf_r+0x182>
 8005b38:	ab03      	add	r3, sp, #12
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	4622      	mov	r2, r4
 8005b3e:	4b11      	ldr	r3, [pc, #68]	; (8005b84 <_svfiprintf_r+0x1ec>)
 8005b40:	a904      	add	r1, sp, #16
 8005b42:	4640      	mov	r0, r8
 8005b44:	f3af 8000 	nop.w
 8005b48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b4c:	4681      	mov	r9, r0
 8005b4e:	d1d6      	bne.n	8005afe <_svfiprintf_r+0x166>
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	065b      	lsls	r3, r3, #25
 8005b54:	f53f af35 	bmi.w	80059c2 <_svfiprintf_r+0x2a>
 8005b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b5a:	b01d      	add	sp, #116	; 0x74
 8005b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b60:	ab03      	add	r3, sp, #12
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	4622      	mov	r2, r4
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <_svfiprintf_r+0x1ec>)
 8005b68:	a904      	add	r1, sp, #16
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	f000 f882 	bl	8005c74 <_printf_i>
 8005b70:	e7ea      	b.n	8005b48 <_svfiprintf_r+0x1b0>
 8005b72:	bf00      	nop
 8005b74:	08006228 	.word	0x08006228
 8005b78:	0800622e 	.word	0x0800622e
 8005b7c:	08006232 	.word	0x08006232
 8005b80:	00000000 	.word	0x00000000
 8005b84:	080058e5 	.word	0x080058e5

08005b88 <_printf_common>:
 8005b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	4691      	mov	r9, r2
 8005b8e:	461f      	mov	r7, r3
 8005b90:	688a      	ldr	r2, [r1, #8]
 8005b92:	690b      	ldr	r3, [r1, #16]
 8005b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	bfb8      	it	lt
 8005b9c:	4613      	movlt	r3, r2
 8005b9e:	f8c9 3000 	str.w	r3, [r9]
 8005ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ba6:	4606      	mov	r6, r0
 8005ba8:	460c      	mov	r4, r1
 8005baa:	b112      	cbz	r2, 8005bb2 <_printf_common+0x2a>
 8005bac:	3301      	adds	r3, #1
 8005bae:	f8c9 3000 	str.w	r3, [r9]
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	0699      	lsls	r1, r3, #26
 8005bb6:	bf42      	ittt	mi
 8005bb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005bbc:	3302      	addmi	r3, #2
 8005bbe:	f8c9 3000 	strmi.w	r3, [r9]
 8005bc2:	6825      	ldr	r5, [r4, #0]
 8005bc4:	f015 0506 	ands.w	r5, r5, #6
 8005bc8:	d107      	bne.n	8005bda <_printf_common+0x52>
 8005bca:	f104 0a19 	add.w	sl, r4, #25
 8005bce:	68e3      	ldr	r3, [r4, #12]
 8005bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8005bd4:	1a9b      	subs	r3, r3, r2
 8005bd6:	42ab      	cmp	r3, r5
 8005bd8:	dc28      	bgt.n	8005c2c <_printf_common+0xa4>
 8005bda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	3300      	adds	r3, #0
 8005be2:	bf18      	it	ne
 8005be4:	2301      	movne	r3, #1
 8005be6:	0692      	lsls	r2, r2, #26
 8005be8:	d42d      	bmi.n	8005c46 <_printf_common+0xbe>
 8005bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bee:	4639      	mov	r1, r7
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	47c0      	blx	r8
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d020      	beq.n	8005c3a <_printf_common+0xb2>
 8005bf8:	6823      	ldr	r3, [r4, #0]
 8005bfa:	68e5      	ldr	r5, [r4, #12]
 8005bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8005c00:	f003 0306 	and.w	r3, r3, #6
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	bf08      	it	eq
 8005c08:	1aad      	subeq	r5, r5, r2
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	6922      	ldr	r2, [r4, #16]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	f04f 0900 	mov.w	r9, #0
 8005c22:	341a      	adds	r4, #26
 8005c24:	454d      	cmp	r5, r9
 8005c26:	d11a      	bne.n	8005c5e <_printf_common+0xd6>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e008      	b.n	8005c3e <_printf_common+0xb6>
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	4652      	mov	r2, sl
 8005c30:	4639      	mov	r1, r7
 8005c32:	4630      	mov	r0, r6
 8005c34:	47c0      	blx	r8
 8005c36:	3001      	adds	r0, #1
 8005c38:	d103      	bne.n	8005c42 <_printf_common+0xba>
 8005c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c42:	3501      	adds	r5, #1
 8005c44:	e7c3      	b.n	8005bce <_printf_common+0x46>
 8005c46:	18e1      	adds	r1, r4, r3
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	2030      	movs	r0, #48	; 0x30
 8005c4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c50:	4422      	add	r2, r4
 8005c52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	e7c5      	b.n	8005bea <_printf_common+0x62>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	4622      	mov	r2, r4
 8005c62:	4639      	mov	r1, r7
 8005c64:	4630      	mov	r0, r6
 8005c66:	47c0      	blx	r8
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d0e6      	beq.n	8005c3a <_printf_common+0xb2>
 8005c6c:	f109 0901 	add.w	r9, r9, #1
 8005c70:	e7d8      	b.n	8005c24 <_printf_common+0x9c>
	...

08005c74 <_printf_i>:
 8005c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	7e09      	ldrb	r1, [r1, #24]
 8005c80:	b085      	sub	sp, #20
 8005c82:	296e      	cmp	r1, #110	; 0x6e
 8005c84:	4617      	mov	r7, r2
 8005c86:	4606      	mov	r6, r0
 8005c88:	4698      	mov	r8, r3
 8005c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c8c:	f000 80b3 	beq.w	8005df6 <_printf_i+0x182>
 8005c90:	d822      	bhi.n	8005cd8 <_printf_i+0x64>
 8005c92:	2963      	cmp	r1, #99	; 0x63
 8005c94:	d036      	beq.n	8005d04 <_printf_i+0x90>
 8005c96:	d80a      	bhi.n	8005cae <_printf_i+0x3a>
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	f000 80b9 	beq.w	8005e10 <_printf_i+0x19c>
 8005c9e:	2958      	cmp	r1, #88	; 0x58
 8005ca0:	f000 8083 	beq.w	8005daa <_printf_i+0x136>
 8005ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cac:	e032      	b.n	8005d14 <_printf_i+0xa0>
 8005cae:	2964      	cmp	r1, #100	; 0x64
 8005cb0:	d001      	beq.n	8005cb6 <_printf_i+0x42>
 8005cb2:	2969      	cmp	r1, #105	; 0x69
 8005cb4:	d1f6      	bne.n	8005ca4 <_printf_i+0x30>
 8005cb6:	6820      	ldr	r0, [r4, #0]
 8005cb8:	6813      	ldr	r3, [r2, #0]
 8005cba:	0605      	lsls	r5, r0, #24
 8005cbc:	f103 0104 	add.w	r1, r3, #4
 8005cc0:	d52a      	bpl.n	8005d18 <_printf_i+0xa4>
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da03      	bge.n	8005cd2 <_printf_i+0x5e>
 8005cca:	222d      	movs	r2, #45	; 0x2d
 8005ccc:	425b      	negs	r3, r3
 8005cce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cd2:	486f      	ldr	r0, [pc, #444]	; (8005e90 <_printf_i+0x21c>)
 8005cd4:	220a      	movs	r2, #10
 8005cd6:	e039      	b.n	8005d4c <_printf_i+0xd8>
 8005cd8:	2973      	cmp	r1, #115	; 0x73
 8005cda:	f000 809d 	beq.w	8005e18 <_printf_i+0x1a4>
 8005cde:	d808      	bhi.n	8005cf2 <_printf_i+0x7e>
 8005ce0:	296f      	cmp	r1, #111	; 0x6f
 8005ce2:	d020      	beq.n	8005d26 <_printf_i+0xb2>
 8005ce4:	2970      	cmp	r1, #112	; 0x70
 8005ce6:	d1dd      	bne.n	8005ca4 <_printf_i+0x30>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	f043 0320 	orr.w	r3, r3, #32
 8005cee:	6023      	str	r3, [r4, #0]
 8005cf0:	e003      	b.n	8005cfa <_printf_i+0x86>
 8005cf2:	2975      	cmp	r1, #117	; 0x75
 8005cf4:	d017      	beq.n	8005d26 <_printf_i+0xb2>
 8005cf6:	2978      	cmp	r1, #120	; 0x78
 8005cf8:	d1d4      	bne.n	8005ca4 <_printf_i+0x30>
 8005cfa:	2378      	movs	r3, #120	; 0x78
 8005cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d00:	4864      	ldr	r0, [pc, #400]	; (8005e94 <_printf_i+0x220>)
 8005d02:	e055      	b.n	8005db0 <_printf_i+0x13c>
 8005d04:	6813      	ldr	r3, [r2, #0]
 8005d06:	1d19      	adds	r1, r3, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6011      	str	r1, [r2, #0]
 8005d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d14:	2301      	movs	r3, #1
 8005d16:	e08c      	b.n	8005e32 <_printf_i+0x1be>
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6011      	str	r1, [r2, #0]
 8005d1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d20:	bf18      	it	ne
 8005d22:	b21b      	sxthne	r3, r3
 8005d24:	e7cf      	b.n	8005cc6 <_printf_i+0x52>
 8005d26:	6813      	ldr	r3, [r2, #0]
 8005d28:	6825      	ldr	r5, [r4, #0]
 8005d2a:	1d18      	adds	r0, r3, #4
 8005d2c:	6010      	str	r0, [r2, #0]
 8005d2e:	0628      	lsls	r0, r5, #24
 8005d30:	d501      	bpl.n	8005d36 <_printf_i+0xc2>
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	e002      	b.n	8005d3c <_printf_i+0xc8>
 8005d36:	0668      	lsls	r0, r5, #25
 8005d38:	d5fb      	bpl.n	8005d32 <_printf_i+0xbe>
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	4854      	ldr	r0, [pc, #336]	; (8005e90 <_printf_i+0x21c>)
 8005d3e:	296f      	cmp	r1, #111	; 0x6f
 8005d40:	bf14      	ite	ne
 8005d42:	220a      	movne	r2, #10
 8005d44:	2208      	moveq	r2, #8
 8005d46:	2100      	movs	r1, #0
 8005d48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d4c:	6865      	ldr	r5, [r4, #4]
 8005d4e:	60a5      	str	r5, [r4, #8]
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	f2c0 8095 	blt.w	8005e80 <_printf_i+0x20c>
 8005d56:	6821      	ldr	r1, [r4, #0]
 8005d58:	f021 0104 	bic.w	r1, r1, #4
 8005d5c:	6021      	str	r1, [r4, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d13d      	bne.n	8005dde <_printf_i+0x16a>
 8005d62:	2d00      	cmp	r5, #0
 8005d64:	f040 808e 	bne.w	8005e84 <_printf_i+0x210>
 8005d68:	4665      	mov	r5, ip
 8005d6a:	2a08      	cmp	r2, #8
 8005d6c:	d10b      	bne.n	8005d86 <_printf_i+0x112>
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	07db      	lsls	r3, r3, #31
 8005d72:	d508      	bpl.n	8005d86 <_printf_i+0x112>
 8005d74:	6923      	ldr	r3, [r4, #16]
 8005d76:	6862      	ldr	r2, [r4, #4]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	bfde      	ittt	le
 8005d7c:	2330      	movle	r3, #48	; 0x30
 8005d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d86:	ebac 0305 	sub.w	r3, ip, r5
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	f8cd 8000 	str.w	r8, [sp]
 8005d90:	463b      	mov	r3, r7
 8005d92:	aa03      	add	r2, sp, #12
 8005d94:	4621      	mov	r1, r4
 8005d96:	4630      	mov	r0, r6
 8005d98:	f7ff fef6 	bl	8005b88 <_printf_common>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d14d      	bne.n	8005e3c <_printf_i+0x1c8>
 8005da0:	f04f 30ff 	mov.w	r0, #4294967295
 8005da4:	b005      	add	sp, #20
 8005da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005daa:	4839      	ldr	r0, [pc, #228]	; (8005e90 <_printf_i+0x21c>)
 8005dac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005db0:	6813      	ldr	r3, [r2, #0]
 8005db2:	6821      	ldr	r1, [r4, #0]
 8005db4:	1d1d      	adds	r5, r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6015      	str	r5, [r2, #0]
 8005dba:	060a      	lsls	r2, r1, #24
 8005dbc:	d50b      	bpl.n	8005dd6 <_printf_i+0x162>
 8005dbe:	07ca      	lsls	r2, r1, #31
 8005dc0:	bf44      	itt	mi
 8005dc2:	f041 0120 	orrmi.w	r1, r1, #32
 8005dc6:	6021      	strmi	r1, [r4, #0]
 8005dc8:	b91b      	cbnz	r3, 8005dd2 <_printf_i+0x15e>
 8005dca:	6822      	ldr	r2, [r4, #0]
 8005dcc:	f022 0220 	bic.w	r2, r2, #32
 8005dd0:	6022      	str	r2, [r4, #0]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	e7b7      	b.n	8005d46 <_printf_i+0xd2>
 8005dd6:	064d      	lsls	r5, r1, #25
 8005dd8:	bf48      	it	mi
 8005dda:	b29b      	uxthmi	r3, r3
 8005ddc:	e7ef      	b.n	8005dbe <_printf_i+0x14a>
 8005dde:	4665      	mov	r5, ip
 8005de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de4:	fb02 3311 	mls	r3, r2, r1, r3
 8005de8:	5cc3      	ldrb	r3, [r0, r3]
 8005dea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005dee:	460b      	mov	r3, r1
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d1f5      	bne.n	8005de0 <_printf_i+0x16c>
 8005df4:	e7b9      	b.n	8005d6a <_printf_i+0xf6>
 8005df6:	6813      	ldr	r3, [r2, #0]
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	6961      	ldr	r1, [r4, #20]
 8005dfc:	1d18      	adds	r0, r3, #4
 8005dfe:	6010      	str	r0, [r2, #0]
 8005e00:	0628      	lsls	r0, r5, #24
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	d501      	bpl.n	8005e0a <_printf_i+0x196>
 8005e06:	6019      	str	r1, [r3, #0]
 8005e08:	e002      	b.n	8005e10 <_printf_i+0x19c>
 8005e0a:	066a      	lsls	r2, r5, #25
 8005e0c:	d5fb      	bpl.n	8005e06 <_printf_i+0x192>
 8005e0e:	8019      	strh	r1, [r3, #0]
 8005e10:	2300      	movs	r3, #0
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	4665      	mov	r5, ip
 8005e16:	e7b9      	b.n	8005d8c <_printf_i+0x118>
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	1d19      	adds	r1, r3, #4
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	681d      	ldr	r5, [r3, #0]
 8005e20:	6862      	ldr	r2, [r4, #4]
 8005e22:	2100      	movs	r1, #0
 8005e24:	4628      	mov	r0, r5
 8005e26:	f7fa fa23 	bl	8000270 <memchr>
 8005e2a:	b108      	cbz	r0, 8005e30 <_printf_i+0x1bc>
 8005e2c:	1b40      	subs	r0, r0, r5
 8005e2e:	6060      	str	r0, [r4, #4]
 8005e30:	6863      	ldr	r3, [r4, #4]
 8005e32:	6123      	str	r3, [r4, #16]
 8005e34:	2300      	movs	r3, #0
 8005e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e3a:	e7a7      	b.n	8005d8c <_printf_i+0x118>
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	462a      	mov	r2, r5
 8005e40:	4639      	mov	r1, r7
 8005e42:	4630      	mov	r0, r6
 8005e44:	47c0      	blx	r8
 8005e46:	3001      	adds	r0, #1
 8005e48:	d0aa      	beq.n	8005da0 <_printf_i+0x12c>
 8005e4a:	6823      	ldr	r3, [r4, #0]
 8005e4c:	079b      	lsls	r3, r3, #30
 8005e4e:	d413      	bmi.n	8005e78 <_printf_i+0x204>
 8005e50:	68e0      	ldr	r0, [r4, #12]
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	4298      	cmp	r0, r3
 8005e56:	bfb8      	it	lt
 8005e58:	4618      	movlt	r0, r3
 8005e5a:	e7a3      	b.n	8005da4 <_printf_i+0x130>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	464a      	mov	r2, r9
 8005e60:	4639      	mov	r1, r7
 8005e62:	4630      	mov	r0, r6
 8005e64:	47c0      	blx	r8
 8005e66:	3001      	adds	r0, #1
 8005e68:	d09a      	beq.n	8005da0 <_printf_i+0x12c>
 8005e6a:	3501      	adds	r5, #1
 8005e6c:	68e3      	ldr	r3, [r4, #12]
 8005e6e:	9a03      	ldr	r2, [sp, #12]
 8005e70:	1a9b      	subs	r3, r3, r2
 8005e72:	42ab      	cmp	r3, r5
 8005e74:	dcf2      	bgt.n	8005e5c <_printf_i+0x1e8>
 8005e76:	e7eb      	b.n	8005e50 <_printf_i+0x1dc>
 8005e78:	2500      	movs	r5, #0
 8005e7a:	f104 0919 	add.w	r9, r4, #25
 8005e7e:	e7f5      	b.n	8005e6c <_printf_i+0x1f8>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1ac      	bne.n	8005dde <_printf_i+0x16a>
 8005e84:	7803      	ldrb	r3, [r0, #0]
 8005e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e8e:	e76c      	b.n	8005d6a <_printf_i+0xf6>
 8005e90:	08006239 	.word	0x08006239
 8005e94:	0800624a 	.word	0x0800624a

08005e98 <memmove>:
 8005e98:	4288      	cmp	r0, r1
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	eb01 0302 	add.w	r3, r1, r2
 8005ea0:	d807      	bhi.n	8005eb2 <memmove+0x1a>
 8005ea2:	1e42      	subs	r2, r0, #1
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	d00a      	beq.n	8005ebe <memmove+0x26>
 8005ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eac:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005eb0:	e7f8      	b.n	8005ea4 <memmove+0xc>
 8005eb2:	4283      	cmp	r3, r0
 8005eb4:	d9f5      	bls.n	8005ea2 <memmove+0xa>
 8005eb6:	1881      	adds	r1, r0, r2
 8005eb8:	1ad2      	subs	r2, r2, r3
 8005eba:	42d3      	cmn	r3, r2
 8005ebc:	d100      	bne.n	8005ec0 <memmove+0x28>
 8005ebe:	bd10      	pop	{r4, pc}
 8005ec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ec4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005ec8:	e7f7      	b.n	8005eba <memmove+0x22>
	...

08005ecc <_free_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	4605      	mov	r5, r0
 8005ed0:	2900      	cmp	r1, #0
 8005ed2:	d045      	beq.n	8005f60 <_free_r+0x94>
 8005ed4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ed8:	1f0c      	subs	r4, r1, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bfb8      	it	lt
 8005ede:	18e4      	addlt	r4, r4, r3
 8005ee0:	f000 f8d2 	bl	8006088 <__malloc_lock>
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	; (8005f64 <_free_r+0x98>)
 8005ee6:	6813      	ldr	r3, [r2, #0]
 8005ee8:	4610      	mov	r0, r2
 8005eea:	b933      	cbnz	r3, 8005efa <_free_r+0x2e>
 8005eec:	6063      	str	r3, [r4, #4]
 8005eee:	6014      	str	r4, [r2, #0]
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ef6:	f000 b8c8 	b.w	800608a <__malloc_unlock>
 8005efa:	42a3      	cmp	r3, r4
 8005efc:	d90c      	bls.n	8005f18 <_free_r+0x4c>
 8005efe:	6821      	ldr	r1, [r4, #0]
 8005f00:	1862      	adds	r2, r4, r1
 8005f02:	4293      	cmp	r3, r2
 8005f04:	bf04      	itt	eq
 8005f06:	681a      	ldreq	r2, [r3, #0]
 8005f08:	685b      	ldreq	r3, [r3, #4]
 8005f0a:	6063      	str	r3, [r4, #4]
 8005f0c:	bf04      	itt	eq
 8005f0e:	1852      	addeq	r2, r2, r1
 8005f10:	6022      	streq	r2, [r4, #0]
 8005f12:	6004      	str	r4, [r0, #0]
 8005f14:	e7ec      	b.n	8005ef0 <_free_r+0x24>
 8005f16:	4613      	mov	r3, r2
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	b10a      	cbz	r2, 8005f20 <_free_r+0x54>
 8005f1c:	42a2      	cmp	r2, r4
 8005f1e:	d9fa      	bls.n	8005f16 <_free_r+0x4a>
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	1858      	adds	r0, r3, r1
 8005f24:	42a0      	cmp	r0, r4
 8005f26:	d10b      	bne.n	8005f40 <_free_r+0x74>
 8005f28:	6820      	ldr	r0, [r4, #0]
 8005f2a:	4401      	add	r1, r0
 8005f2c:	1858      	adds	r0, r3, r1
 8005f2e:	4282      	cmp	r2, r0
 8005f30:	6019      	str	r1, [r3, #0]
 8005f32:	d1dd      	bne.n	8005ef0 <_free_r+0x24>
 8005f34:	6810      	ldr	r0, [r2, #0]
 8005f36:	6852      	ldr	r2, [r2, #4]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	4401      	add	r1, r0
 8005f3c:	6019      	str	r1, [r3, #0]
 8005f3e:	e7d7      	b.n	8005ef0 <_free_r+0x24>
 8005f40:	d902      	bls.n	8005f48 <_free_r+0x7c>
 8005f42:	230c      	movs	r3, #12
 8005f44:	602b      	str	r3, [r5, #0]
 8005f46:	e7d3      	b.n	8005ef0 <_free_r+0x24>
 8005f48:	6820      	ldr	r0, [r4, #0]
 8005f4a:	1821      	adds	r1, r4, r0
 8005f4c:	428a      	cmp	r2, r1
 8005f4e:	bf04      	itt	eq
 8005f50:	6811      	ldreq	r1, [r2, #0]
 8005f52:	6852      	ldreq	r2, [r2, #4]
 8005f54:	6062      	str	r2, [r4, #4]
 8005f56:	bf04      	itt	eq
 8005f58:	1809      	addeq	r1, r1, r0
 8005f5a:	6021      	streq	r1, [r4, #0]
 8005f5c:	605c      	str	r4, [r3, #4]
 8005f5e:	e7c7      	b.n	8005ef0 <_free_r+0x24>
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	200143a0 	.word	0x200143a0

08005f68 <_malloc_r>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	1ccd      	adds	r5, r1, #3
 8005f6c:	f025 0503 	bic.w	r5, r5, #3
 8005f70:	3508      	adds	r5, #8
 8005f72:	2d0c      	cmp	r5, #12
 8005f74:	bf38      	it	cc
 8005f76:	250c      	movcc	r5, #12
 8005f78:	2d00      	cmp	r5, #0
 8005f7a:	4606      	mov	r6, r0
 8005f7c:	db01      	blt.n	8005f82 <_malloc_r+0x1a>
 8005f7e:	42a9      	cmp	r1, r5
 8005f80:	d903      	bls.n	8005f8a <_malloc_r+0x22>
 8005f82:	230c      	movs	r3, #12
 8005f84:	6033      	str	r3, [r6, #0]
 8005f86:	2000      	movs	r0, #0
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	f000 f87d 	bl	8006088 <__malloc_lock>
 8005f8e:	4a21      	ldr	r2, [pc, #132]	; (8006014 <_malloc_r+0xac>)
 8005f90:	6814      	ldr	r4, [r2, #0]
 8005f92:	4621      	mov	r1, r4
 8005f94:	b991      	cbnz	r1, 8005fbc <_malloc_r+0x54>
 8005f96:	4c20      	ldr	r4, [pc, #128]	; (8006018 <_malloc_r+0xb0>)
 8005f98:	6823      	ldr	r3, [r4, #0]
 8005f9a:	b91b      	cbnz	r3, 8005fa4 <_malloc_r+0x3c>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f863 	bl	8006068 <_sbrk_r>
 8005fa2:	6020      	str	r0, [r4, #0]
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	f000 f85e 	bl	8006068 <_sbrk_r>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d124      	bne.n	8005ffa <_malloc_r+0x92>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	6033      	str	r3, [r6, #0]
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 f868 	bl	800608a <__malloc_unlock>
 8005fba:	e7e4      	b.n	8005f86 <_malloc_r+0x1e>
 8005fbc:	680b      	ldr	r3, [r1, #0]
 8005fbe:	1b5b      	subs	r3, r3, r5
 8005fc0:	d418      	bmi.n	8005ff4 <_malloc_r+0x8c>
 8005fc2:	2b0b      	cmp	r3, #11
 8005fc4:	d90f      	bls.n	8005fe6 <_malloc_r+0x7e>
 8005fc6:	600b      	str	r3, [r1, #0]
 8005fc8:	50cd      	str	r5, [r1, r3]
 8005fca:	18cc      	adds	r4, r1, r3
 8005fcc:	4630      	mov	r0, r6
 8005fce:	f000 f85c 	bl	800608a <__malloc_unlock>
 8005fd2:	f104 000b 	add.w	r0, r4, #11
 8005fd6:	1d23      	adds	r3, r4, #4
 8005fd8:	f020 0007 	bic.w	r0, r0, #7
 8005fdc:	1ac3      	subs	r3, r0, r3
 8005fde:	d0d3      	beq.n	8005f88 <_malloc_r+0x20>
 8005fe0:	425a      	negs	r2, r3
 8005fe2:	50e2      	str	r2, [r4, r3]
 8005fe4:	e7d0      	b.n	8005f88 <_malloc_r+0x20>
 8005fe6:	428c      	cmp	r4, r1
 8005fe8:	684b      	ldr	r3, [r1, #4]
 8005fea:	bf16      	itet	ne
 8005fec:	6063      	strne	r3, [r4, #4]
 8005fee:	6013      	streq	r3, [r2, #0]
 8005ff0:	460c      	movne	r4, r1
 8005ff2:	e7eb      	b.n	8005fcc <_malloc_r+0x64>
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	6849      	ldr	r1, [r1, #4]
 8005ff8:	e7cc      	b.n	8005f94 <_malloc_r+0x2c>
 8005ffa:	1cc4      	adds	r4, r0, #3
 8005ffc:	f024 0403 	bic.w	r4, r4, #3
 8006000:	42a0      	cmp	r0, r4
 8006002:	d005      	beq.n	8006010 <_malloc_r+0xa8>
 8006004:	1a21      	subs	r1, r4, r0
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f82e 	bl	8006068 <_sbrk_r>
 800600c:	3001      	adds	r0, #1
 800600e:	d0cf      	beq.n	8005fb0 <_malloc_r+0x48>
 8006010:	6025      	str	r5, [r4, #0]
 8006012:	e7db      	b.n	8005fcc <_malloc_r+0x64>
 8006014:	200143a0 	.word	0x200143a0
 8006018:	200143a4 	.word	0x200143a4

0800601c <_realloc_r>:
 800601c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601e:	4607      	mov	r7, r0
 8006020:	4614      	mov	r4, r2
 8006022:	460e      	mov	r6, r1
 8006024:	b921      	cbnz	r1, 8006030 <_realloc_r+0x14>
 8006026:	4611      	mov	r1, r2
 8006028:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800602c:	f7ff bf9c 	b.w	8005f68 <_malloc_r>
 8006030:	b922      	cbnz	r2, 800603c <_realloc_r+0x20>
 8006032:	f7ff ff4b 	bl	8005ecc <_free_r>
 8006036:	4625      	mov	r5, r4
 8006038:	4628      	mov	r0, r5
 800603a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800603c:	f000 f826 	bl	800608c <_malloc_usable_size_r>
 8006040:	42a0      	cmp	r0, r4
 8006042:	d20f      	bcs.n	8006064 <_realloc_r+0x48>
 8006044:	4621      	mov	r1, r4
 8006046:	4638      	mov	r0, r7
 8006048:	f7ff ff8e 	bl	8005f68 <_malloc_r>
 800604c:	4605      	mov	r5, r0
 800604e:	2800      	cmp	r0, #0
 8006050:	d0f2      	beq.n	8006038 <_realloc_r+0x1c>
 8006052:	4631      	mov	r1, r6
 8006054:	4622      	mov	r2, r4
 8006056:	f7ff fbfe 	bl	8005856 <memcpy>
 800605a:	4631      	mov	r1, r6
 800605c:	4638      	mov	r0, r7
 800605e:	f7ff ff35 	bl	8005ecc <_free_r>
 8006062:	e7e9      	b.n	8006038 <_realloc_r+0x1c>
 8006064:	4635      	mov	r5, r6
 8006066:	e7e7      	b.n	8006038 <_realloc_r+0x1c>

08006068 <_sbrk_r>:
 8006068:	b538      	push	{r3, r4, r5, lr}
 800606a:	4c06      	ldr	r4, [pc, #24]	; (8006084 <_sbrk_r+0x1c>)
 800606c:	2300      	movs	r3, #0
 800606e:	4605      	mov	r5, r0
 8006070:	4608      	mov	r0, r1
 8006072:	6023      	str	r3, [r4, #0]
 8006074:	f000 f812 	bl	800609c <_sbrk>
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d102      	bne.n	8006082 <_sbrk_r+0x1a>
 800607c:	6823      	ldr	r3, [r4, #0]
 800607e:	b103      	cbz	r3, 8006082 <_sbrk_r+0x1a>
 8006080:	602b      	str	r3, [r5, #0]
 8006082:	bd38      	pop	{r3, r4, r5, pc}
 8006084:	20014498 	.word	0x20014498

08006088 <__malloc_lock>:
 8006088:	4770      	bx	lr

0800608a <__malloc_unlock>:
 800608a:	4770      	bx	lr

0800608c <_malloc_usable_size_r>:
 800608c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006090:	1f18      	subs	r0, r3, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfbc      	itt	lt
 8006096:	580b      	ldrlt	r3, [r1, r0]
 8006098:	18c0      	addlt	r0, r0, r3
 800609a:	4770      	bx	lr

0800609c <_sbrk>:
 800609c:	4b04      	ldr	r3, [pc, #16]	; (80060b0 <_sbrk+0x14>)
 800609e:	6819      	ldr	r1, [r3, #0]
 80060a0:	4602      	mov	r2, r0
 80060a2:	b909      	cbnz	r1, 80060a8 <_sbrk+0xc>
 80060a4:	4903      	ldr	r1, [pc, #12]	; (80060b4 <_sbrk+0x18>)
 80060a6:	6019      	str	r1, [r3, #0]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	4402      	add	r2, r0
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	4770      	bx	lr
 80060b0:	200143a8 	.word	0x200143a8
 80060b4:	200144a0 	.word	0x200144a0

080060b8 <_init>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	bf00      	nop
 80060bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060be:	bc08      	pop	{r3}
 80060c0:	469e      	mov	lr, r3
 80060c2:	4770      	bx	lr

080060c4 <_fini>:
 80060c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c6:	bf00      	nop
 80060c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ca:	bc08      	pop	{r3}
 80060cc:	469e      	mov	lr, r3
 80060ce:	4770      	bx	lr
